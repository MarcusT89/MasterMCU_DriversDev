
MasterMCU_DriversDev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002064  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002234  08002234  00012234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022dc  080022dc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080022dc  080022dc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022dc  080022dc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080022e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000064  08002348  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08002348  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038cb  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009f5  00000000  00000000  0002395f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00024358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  000245d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036d2  00000000  00000000  000247f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000028bf  00000000  00000000  00027ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c4e3  00000000  00000000  0002a781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00036c64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001114  00000000  00000000  00036cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800221c 	.word	0x0800221c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800221c 	.word	0x0800221c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <SPI2_GPIOInits+0x58>)
 80002b8:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ba:	2302      	movs	r3, #2
 80002bc:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002be:	2305      	movs	r3, #5
 80002c0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPER_PP;
 80002c2:	2300      	movs	r3, #0
 80002c4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80002c6:	2300      	movs	r3, #0
 80002c8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002ca:	2302      	movs	r3, #2
 80002cc:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ce:	230d      	movs	r3, #13
 80002d0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 faad 	bl	8000834 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002da:	230f      	movs	r3, #15
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 faa7 	bl	8000834 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002e6:	230e      	movs	r3, #14
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 faa1 	bl	8000834 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002f2:	230c      	movs	r3, #12
 80002f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fa9b 	bl	8000834 <GPIO_Init>


}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40020400 	.word	0x40020400

0800030c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <SPI2_Inits+0x38>)
 8000314:	603b      	str	r3, [r7, #0]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000316:	2301      	movs	r3, #1
 8000318:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800031a:	2301      	movs	r3, #1
 800031c:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 800031e:	2304      	movs	r3, #4
 8000320:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPI_Config.SPI_DEF = SPI_DFF_8BITS;
 8000322:	2300      	movs	r3, #0
 8000324:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000326:	2300      	movs	r3, #0
 8000328:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800032e:	2300      	movs	r3, #0
 8000330:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000332:	463b      	mov	r3, r7
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fd55 	bl	8000de4 <SPI_Init>
}
 800033a:	bf00      	nop
 800033c:	3720      	adds	r7, #32
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40003800 	.word	0x40003800

08000348 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	220c      	movs	r2, #12
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f001 f803 	bl	8001360 <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <Slave_GPIO_InterruptPinInit+0x48>)
 800035c:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800035e:	2306      	movs	r3, #6
 8000360:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000362:	2304      	movs	r3, #4
 8000364:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000366:	2300      	movs	r3, #0
 8000368:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800036a:	2301      	movs	r3, #1
 800036c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fa5f 	bl	8000834 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15);
 8000376:	210f      	movs	r1, #15
 8000378:	2017      	movs	r0, #23
 800037a:	f000 fc79 	bl	8000c70 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	2017      	movs	r0, #23
 8000382:	f000 fbef 	bl	8000b64 <GPIO_IRQInterruptConfig>

}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40020c00 	.word	0x40020c00

08000394 <main>:


int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 800039a:	23ff      	movs	r3, #255	; 0xff
 800039c:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800039e:	f7ff ffd3 	bl	8000348 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80003a2:	f7ff ff85 	bl	80002b0 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80003a6:	f7ff ffb1 	bl	800030c <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	4824      	ldr	r0, [pc, #144]	; (8000440 <main+0xac>)
 80003ae:	f000 ff5a 	bl	8001266 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 80003b2:	2101      	movs	r1, #1
 80003b4:	2024      	movs	r0, #36	; 0x24
 80003b6:	f000 fd85 	bl	8000ec4 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 80003ba:	4b22      	ldr	r3, [pc, #136]	; (8000444 <main+0xb0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 80003c0:	bf00      	nop
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <main+0xb4>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d0fa      	beq.n	80003c2 <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 80003cc:	2100      	movs	r1, #0
 80003ce:	2017      	movs	r0, #23
 80003d0:	f000 fbc8 	bl	8000b64 <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003d4:	2101      	movs	r1, #1
 80003d6:	481a      	ldr	r0, [pc, #104]	; (8000440 <main+0xac>)
 80003d8:	f000 ff29 	bl	800122e <SPI_PeripheralControl>


		while(!rcvStop)
 80003dc:	e012      	b.n	8000404 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80003de:	bf00      	nop
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	2201      	movs	r2, #1
 80003e4:	4619      	mov	r1, r3
 80003e6:	4819      	ldr	r0, [pc, #100]	; (800044c <main+0xb8>)
 80003e8:	f000 fdf2 	bl	8000fd0 <SPI_SendDataIT>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d0f6      	beq.n	80003e0 <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 80003f2:	bf00      	nop
 80003f4:	2201      	movs	r2, #1
 80003f6:	4916      	ldr	r1, [pc, #88]	; (8000450 <main+0xbc>)
 80003f8:	4814      	ldr	r0, [pc, #80]	; (800044c <main+0xb8>)
 80003fa:	f000 fe0d 	bl	8001018 <SPI_ReceiveDataIT>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b01      	cmp	r3, #1
 8000402:	d0f7      	beq.n	80003f4 <main+0x60>
		while(!rcvStop)
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <main+0xb0>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0e7      	beq.n	80003de <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_SR_BUSY_FLAG) );
 800040e:	bf00      	nop
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	480b      	ldr	r0, [pc, #44]	; (8000440 <main+0xac>)
 8000414:	f000 fd41 	bl	8000e9a <SPI_GetFlagStatus>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f8      	bne.n	8000410 <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800041e:	2100      	movs	r1, #0
 8000420:	4807      	ldr	r0, [pc, #28]	; (8000440 <main+0xac>)
 8000422:	f000 ff04 	bl	800122e <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 8000426:	490b      	ldr	r1, [pc, #44]	; (8000454 <main+0xc0>)
 8000428:	480b      	ldr	r0, [pc, #44]	; (8000458 <main+0xc4>)
 800042a:	f000 ffa1 	bl	8001370 <iprintf>

		dataAvailable = 0;
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <main+0xb4>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000434:	2101      	movs	r1, #1
 8000436:	2017      	movs	r0, #23
 8000438:	f000 fb94 	bl	8000b64 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 800043c:	e7bd      	b.n	80003ba <main+0x26>
 800043e:	bf00      	nop
 8000440:	40003800 	.word	0x40003800
 8000444:	20000080 	.word	0x20000080
 8000448:	20000081 	.word	0x20000081
 800044c:	20000098 	.word	0x20000098
 8000450:	20000094 	.word	0x20000094
 8000454:	200000b8 	.word	0x200000b8
 8000458:	08002234 	.word	0x08002234

0800045c <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 8000460:	4802      	ldr	r0, [pc, #8]	; (800046c <SPI2_IRQHandler+0x10>)
 8000462:	f000 fdfd 	bl	8001060 <SPI_IRQHandling>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000098 	.word	0x20000098

08000470 <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	460b      	mov	r3, r1
 800047a:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 800047c:	78fb      	ldrb	r3, [r7, #3]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d11f      	bne.n	80004c2 <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <SPI_ApplicationEventCallback+0x60>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	4911      	ldr	r1, [pc, #68]	; (80004d0 <SPI_ApplicationEventCallback+0x60>)
 800048a:	600a      	str	r2, [r1, #0]
 800048c:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <SPI_ApplicationEventCallback+0x64>)
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	b2d1      	uxtb	r1, r2
 8000492:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <SPI_ApplicationEventCallback+0x68>)
 8000494:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <SPI_ApplicationEventCallback+0x64>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d004      	beq.n	80004aa <SPI_ApplicationEventCallback+0x3a>
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <SPI_ApplicationEventCallback+0x60>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004a8:	d10b      	bne.n	80004c2 <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <SPI_ApplicationEventCallback+0x6c>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <SPI_ApplicationEventCallback+0x60>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <SPI_ApplicationEventCallback+0x68>)
 80004b8:	2100      	movs	r1, #0
 80004ba:	54d1      	strb	r1, [r2, r3]
					i = 0;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <SPI_ApplicationEventCallback+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
				}
	}

}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000084 	.word	0x20000084
 80004d4:	20000094 	.word	0x20000094
 80004d8:	200000b8 	.word	0x200000b8
 80004dc:	20000080 	.word	0x20000080

080004e0 <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80004e4:	2006      	movs	r0, #6
 80004e6:	f000 fbed 	bl	8000cc4 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004ea:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <EXTI9_5_IRQHandler+0x14>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	701a      	strb	r2, [r3, #0]
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000081 	.word	0x20000081

080004f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	e00a      	b.n	8000520 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800050a:	f3af 8000 	nop.w
 800050e:	4601      	mov	r1, r0
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	60ba      	str	r2, [r7, #8]
 8000516:	b2ca      	uxtb	r2, r1
 8000518:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	429a      	cmp	r2, r3
 8000526:	dbf0      	blt.n	800050a <_read+0x12>
	}

return len;
 8000528:	687b      	ldr	r3, [r7, #4]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	e009      	b.n	8000558 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	60ba      	str	r2, [r7, #8]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	3301      	adds	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	dbf1      	blt.n	8000544 <_write+0x12>
	}
	return len;
 8000560:	687b      	ldr	r3, [r7, #4]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_close>:

int _close(int file)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	return -1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000592:	605a      	str	r2, [r3, #4]
	return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <_isatty>:

int _isatty(int file)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
	return 1;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <_sbrk+0x5c>)
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <_sbrk+0x60>)
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_sbrk+0x64>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <_sbrk+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000604:	f000 fe82 	bl	800130c <__errno>
 8000608:	4603      	mov	r3, r0
 800060a:	220c      	movs	r2, #12
 800060c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	e009      	b.n	8000628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <_sbrk+0x64>)
 8000624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20020000 	.word	0x20020000
 8000634:	00000400 	.word	0x00000400
 8000638:	20000088 	.word	0x20000088
 800063c:	200002c0 	.word	0x200002c0

08000640 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000642:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000644:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <LoopForever+0x6>)
  ldr r1, =_edata
 800064a:	490d      	ldr	r1, [pc, #52]	; (8000680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <LoopForever+0xe>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000660:	4c0a      	ldr	r4, [pc, #40]	; (800068c <LoopForever+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800066e:	f000 fe53 	bl	8001318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fe8f 	bl	8000394 <main>

08000676 <LoopForever>:

LoopForever:
    b LoopForever
 8000676:	e7fe      	b.n	8000676 <LoopForever>
  ldr   r0, =_estack
 8000678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000684:	080022e4 	.word	0x080022e4
  ldr r2, =_sbss
 8000688:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800068c:	200002bc 	.word	0x200002bc

08000690 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC_IRQHandler>
	...

08000694 <GPIO_PeriClockControl>:
 * @param pGPIOx Pointer to a GPIO reg
 * @param ENorDI Enalbe or disable
 *
 * @return void.
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  
  if(ENorDI == ENABLE)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d157      	bne.n	8000756 <GPIO_PeriClockControl+0xc2>
  {
    if(pGPIOx == GPIOA){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a59      	ldr	r2, [pc, #356]	; (8000810 <GPIO_PeriClockControl+0x17c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d106      	bne.n	80006bc <GPIO_PeriClockControl+0x28>
      GPIOA_PCLK_EN();
 80006ae:	4b59      	ldr	r3, [pc, #356]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a58      	ldr	r2, [pc, #352]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
    }else if(pGPIOx == GPIOH){
      GPIOH_PCLK_DI();
    }    
  }
  
}
 80006ba:	e0a3      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOB){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a56      	ldr	r2, [pc, #344]	; (8000818 <GPIO_PeriClockControl+0x184>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d106      	bne.n	80006d2 <GPIO_PeriClockControl+0x3e>
      GPIOB_PCLK_EN();
 80006c4:	4b53      	ldr	r3, [pc, #332]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a52      	ldr	r2, [pc, #328]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80006ca:	f043 0302 	orr.w	r3, r3, #2
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d0:	e098      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOC){
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a51      	ldr	r2, [pc, #324]	; (800081c <GPIO_PeriClockControl+0x188>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d106      	bne.n	80006e8 <GPIO_PeriClockControl+0x54>
      GPIOC_PCLK_EN();
 80006da:	4b4e      	ldr	r3, [pc, #312]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a4d      	ldr	r2, [pc, #308]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e6:	e08d      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOD){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a4d      	ldr	r2, [pc, #308]	; (8000820 <GPIO_PeriClockControl+0x18c>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d106      	bne.n	80006fe <GPIO_PeriClockControl+0x6a>
      GPIOD_PCLK_EN();
 80006f0:	4b48      	ldr	r3, [pc, #288]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	4a47      	ldr	r2, [pc, #284]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006fc:	e082      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOE){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a48      	ldr	r2, [pc, #288]	; (8000824 <GPIO_PeriClockControl+0x190>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <GPIO_PeriClockControl+0x80>
      GPIOE_PCLK_EN();
 8000706:	4b43      	ldr	r3, [pc, #268]	; (8000814 <GPIO_PeriClockControl+0x180>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a42      	ldr	r2, [pc, #264]	; (8000814 <GPIO_PeriClockControl+0x180>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000712:	e077      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOF){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a44      	ldr	r2, [pc, #272]	; (8000828 <GPIO_PeriClockControl+0x194>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <GPIO_PeriClockControl+0x96>
      GPIOF_PCLK_EN();
 800071c:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <GPIO_PeriClockControl+0x180>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	4a3c      	ldr	r2, [pc, #240]	; (8000814 <GPIO_PeriClockControl+0x180>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000728:	e06c      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOG){
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a3f      	ldr	r2, [pc, #252]	; (800082c <GPIO_PeriClockControl+0x198>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <GPIO_PeriClockControl+0xac>
      GPIOG_PCLK_EN();
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <GPIO_PeriClockControl+0x180>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a37      	ldr	r2, [pc, #220]	; (8000814 <GPIO_PeriClockControl+0x180>)
 8000738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073e:	e061      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOH){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a3b      	ldr	r2, [pc, #236]	; (8000830 <GPIO_PeriClockControl+0x19c>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d15d      	bne.n	8000804 <GPIO_PeriClockControl+0x170>
      GPIOH_PCLK_EN();
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <GPIO_PeriClockControl+0x180>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	4a31      	ldr	r2, [pc, #196]	; (8000814 <GPIO_PeriClockControl+0x180>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000754:	e056      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    if(pGPIOx == GPIOA){
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a2d      	ldr	r2, [pc, #180]	; (8000810 <GPIO_PeriClockControl+0x17c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <GPIO_PeriClockControl+0xd8>
      GPIOA_PCLK_DI();
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <GPIO_PeriClockControl+0x180>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a2c      	ldr	r2, [pc, #176]	; (8000814 <GPIO_PeriClockControl+0x180>)
 8000764:	f023 0301 	bic.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
}
 800076a:	e04b      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOB){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <GPIO_PeriClockControl+0x184>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <GPIO_PeriClockControl+0xee>
      GPIOB_PCLK_DI();
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <GPIO_PeriClockControl+0x180>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <GPIO_PeriClockControl+0x180>)
 800077a:	f023 0302 	bic.w	r3, r3, #2
 800077e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000780:	e040      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOC){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a25      	ldr	r2, [pc, #148]	; (800081c <GPIO_PeriClockControl+0x188>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <GPIO_PeriClockControl+0x104>
      GPIOC_PCLK_DI();
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <GPIO_PeriClockControl+0x180>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <GPIO_PeriClockControl+0x180>)
 8000790:	f023 0304 	bic.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000796:	e035      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOD){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a21      	ldr	r2, [pc, #132]	; (8000820 <GPIO_PeriClockControl+0x18c>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <GPIO_PeriClockControl+0x11a>
      GPIOD_PCLK_DI();
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007a6:	f023 0308 	bic.w	r3, r3, #8
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ac:	e02a      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOE){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <GPIO_PeriClockControl+0x190>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PeriClockControl+0x130>
      GPIOE_PCLK_DI();
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007bc:	f023 0310 	bic.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c2:	e01f      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOF){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <GPIO_PeriClockControl+0x194>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <GPIO_PeriClockControl+0x146>
      GPIOF_PCLK_DI();
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a10      	ldr	r2, [pc, #64]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007d2:	f023 0320 	bic.w	r3, r3, #32
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d8:	e014      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOG){
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <GPIO_PeriClockControl+0x198>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <GPIO_PeriClockControl+0x15c>
      GPIOG_PCLK_DI();
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ee:	e009      	b.n	8000804 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOH){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <GPIO_PeriClockControl+0x19c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d105      	bne.n	8000804 <GPIO_PeriClockControl+0x170>
      GPIOH_PCLK_DI();
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <GPIO_PeriClockControl+0x180>)
 80007fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000802:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40020000 	.word	0x40020000
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400
 800081c:	40020800 	.word	0x40020800
 8000820:	40020c00 	.word	0x40020c00
 8000824:	40021000 	.word	0x40021000
 8000828:	40021400 	.word	0x40021400
 800082c:	40021800 	.word	0x40021800
 8000830:	40021c00 	.word	0x40021c00

08000834 <GPIO_Init>:
 * @param *pGPIOHandle Pointer to GPIO handle
 *
 * @return void.
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0; // temp register
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  // Peripheral clock  enable : para não estar sempre a chama-lo na função MAIN
  GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2101      	movs	r1, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff24 	bl	8000694 <GPIO_PeriClockControl>

  //1. configure Gpio pin Mode (aula: 95)
  if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){ // look at the " GPIO pin possible mode" in this.h 0 to 3 are non interrupting modes
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d81f      	bhi.n	8000894 <GPIO_Init+0x60>
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	795b      	ldrb	r3, [r3, #5]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	4619      	mov	r1, r3
 8000872:	2303      	movs	r3, #3
 8000874:	408b      	lsls	r3, r1
 8000876:	43db      	mvns	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	400a      	ands	r2, r1
 8000880:	601a      	str	r2, [r3, #0]
    pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	e0c2      	b.n	8000a1a <GPIO_Init+0x1e6>
  }
  else
  {
	  // for interrupt  mode
	  if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d817      	bhi.n	80008cc <GPIO_Init+0x98>
	  {
		  //1. configure the FTSR
		  EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800089c:	4b47      	ldr	r3, [pc, #284]	; (80009bc <GPIO_Init+0x188>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	7912      	ldrb	r2, [r2, #4]
 80008a4:	4611      	mov	r1, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	408a      	lsls	r2, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a43      	ldr	r2, [pc, #268]	; (80009bc <GPIO_Init+0x188>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	60d3      	str	r3, [r2, #12]
		  // clear the corresponding RTSR bit
		  EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b2:	4b42      	ldr	r3, [pc, #264]	; (80009bc <GPIO_Init+0x188>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	7912      	ldrb	r2, [r2, #4]
 80008ba:	4611      	mov	r1, r2
 80008bc:	2201      	movs	r2, #1
 80008be:	408a      	lsls	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <GPIO_Init+0x188>)
 80008c6:	400b      	ands	r3, r1
 80008c8:	6093      	str	r3, [r2, #8]
 80008ca:	e035      	b.n	8000938 <GPIO_Init+0x104>
	  }
	  else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	795b      	ldrb	r3, [r3, #5]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d817      	bhi.n	8000904 <GPIO_Init+0xd0>
	  {
		  //1. configure the RTSR
		  EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <GPIO_Init+0x188>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	7912      	ldrb	r2, [r2, #4]
 80008dc:	4611      	mov	r1, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	408a      	lsls	r2, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a35      	ldr	r2, [pc, #212]	; (80009bc <GPIO_Init+0x188>)
 80008e6:	430b      	orrs	r3, r1
 80008e8:	6093      	str	r3, [r2, #8]
		  // clear the corresponding FTSR bit
		  EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <GPIO_Init+0x188>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	7912      	ldrb	r2, [r2, #4]
 80008f2:	4611      	mov	r1, r2
 80008f4:	2201      	movs	r2, #1
 80008f6:	408a      	lsls	r2, r1
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <GPIO_Init+0x188>)
 80008fe:	400b      	ands	r3, r1
 8000900:	60d3      	str	r3, [r2, #12]
 8000902:	e019      	b.n	8000938 <GPIO_Init+0x104>
	  }
	  else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FRT)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	795b      	ldrb	r3, [r3, #5]
 8000908:	2b06      	cmp	r3, #6
 800090a:	d815      	bhi.n	8000938 <GPIO_Init+0x104>
	  {
		  //1. configure the FTSR
		  EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800090c:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <GPIO_Init+0x188>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	7912      	ldrb	r2, [r2, #4]
 8000914:	4611      	mov	r1, r2
 8000916:	2201      	movs	r2, #1
 8000918:	408a      	lsls	r2, r1
 800091a:	4611      	mov	r1, r2
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <GPIO_Init+0x188>)
 800091e:	430b      	orrs	r3, r1
 8000920:	60d3      	str	r3, [r2, #12]
		  // and configure RTSR bit
		  EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <GPIO_Init+0x188>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7912      	ldrb	r2, [r2, #4]
 800092a:	4611      	mov	r1, r2
 800092c:	2201      	movs	r2, #1
 800092e:	408a      	lsls	r2, r1
 8000930:	4611      	mov	r1, r2
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <GPIO_Init+0x188>)
 8000934:	430b      	orrs	r3, r1
 8000936:	6093      	str	r3, [r2, #8]
	  }
	  // 2. Configure the GPIO port selection in SYSCFG_EXTICR
	  uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4; // (AULA:111)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	089b      	lsrs	r3, r3, #2
 800093e:	74fb      	strb	r3, [r7, #19]
	  uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	74bb      	strb	r3, [r7, #18]
	  uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <GPIO_Init+0x18c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d045      	beq.n	80009e0 <GPIO_Init+0x1ac>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1a      	ldr	r2, [pc, #104]	; (80009c4 <GPIO_Init+0x190>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d02b      	beq.n	80009b6 <GPIO_Init+0x182>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <GPIO_Init+0x194>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d024      	beq.n	80009b2 <GPIO_Init+0x17e>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <GPIO_Init+0x198>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d01d      	beq.n	80009ae <GPIO_Init+0x17a>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <GPIO_Init+0x19c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d016      	beq.n	80009aa <GPIO_Init+0x176>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <GPIO_Init+0x1a0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d00f      	beq.n	80009a6 <GPIO_Init+0x172>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <GPIO_Init+0x1a4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d008      	beq.n	80009a2 <GPIO_Init+0x16e>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a11      	ldr	r2, [pc, #68]	; (80009dc <GPIO_Init+0x1a8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <GPIO_Init+0x16a>
 800099a:	2307      	movs	r3, #7
 800099c:	e021      	b.n	80009e2 <GPIO_Init+0x1ae>
 800099e:	2300      	movs	r3, #0
 80009a0:	e01f      	b.n	80009e2 <GPIO_Init+0x1ae>
 80009a2:	2306      	movs	r3, #6
 80009a4:	e01d      	b.n	80009e2 <GPIO_Init+0x1ae>
 80009a6:	2305      	movs	r3, #5
 80009a8:	e01b      	b.n	80009e2 <GPIO_Init+0x1ae>
 80009aa:	2304      	movs	r3, #4
 80009ac:	e019      	b.n	80009e2 <GPIO_Init+0x1ae>
 80009ae:	2303      	movs	r3, #3
 80009b0:	e017      	b.n	80009e2 <GPIO_Init+0x1ae>
 80009b2:	2302      	movs	r3, #2
 80009b4:	e015      	b.n	80009e2 <GPIO_Init+0x1ae>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e013      	b.n	80009e2 <GPIO_Init+0x1ae>
 80009ba:	bf00      	nop
 80009bc:	40013c00 	.word	0x40013c00
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40021400 	.word	0x40021400
 80009d8:	40021800 	.word	0x40021800
 80009dc:	40021c00 	.word	0x40021c00
 80009e0:	2300      	movs	r3, #0
 80009e2:	747b      	strb	r3, [r7, #17]
	  SYSCFG_PCLK_EN();
 80009e4:	4b5c      	ldr	r3, [pc, #368]	; (8000b58 <GPIO_Init+0x324>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e8:	4a5b      	ldr	r2, [pc, #364]	; (8000b58 <GPIO_Init+0x324>)
 80009ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ee:	6453      	str	r3, [r2, #68]	; 0x44
	  SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80009f0:	7c7a      	ldrb	r2, [r7, #17]
 80009f2:	7cbb      	ldrb	r3, [r7, #18]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	fa02 f103 	lsl.w	r1, r2, r3
 80009fa:	4a58      	ldr	r2, [pc, #352]	; (8000b5c <GPIO_Init+0x328>)
 80009fc:	7cfb      	ldrb	r3, [r7, #19]
 80009fe:	3302      	adds	r3, #2
 8000a00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  // 3. enable the EXTI interrupt delivery using IMR
	  EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a04:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <GPIO_Init+0x32c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	7912      	ldrb	r2, [r2, #4]
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2201      	movs	r2, #1
 8000a10:	408a      	lsls	r2, r1
 8000a12:	4611      	mov	r1, r2
 8000a14:	4a52      	ldr	r2, [pc, #328]	; (8000b60 <GPIO_Init+0x32c>)
 8000a16:	430b      	orrs	r3, r1
 8000a18:	6013      	str	r3, [r2, #0]

  }
  
  //2. configure speed
  temp = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	799b      	ldrb	r3, [r3, #6]
 8000a22:	461a      	mov	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	791b      	ldrb	r3, [r3, #4]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	791b      	ldrb	r3, [r3, #4]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	408b      	lsls	r3, r1
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	400a      	ands	r2, r1
 8000a4a:	609a      	str	r2, [r3, #8]
  pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6899      	ldr	r1, [r3, #8]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	609a      	str	r2, [r3, #8]
  
  //3. configure popup popdown setting
  temp = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	79db      	ldrb	r3, [r3, #7]
 8000a64:	461a      	mov	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	617b      	str	r3, [r7, #20]
  pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	791b      	ldrb	r3, [r3, #4]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	2303      	movs	r3, #3
 8000a80:	408b      	lsls	r3, r1
 8000a82:	43db      	mvns	r3, r3
 8000a84:	4619      	mov	r1, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	60da      	str	r2, [r3, #12]
  pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68d9      	ldr	r1, [r3, #12]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	60da      	str	r2, [r3, #12]
    
  //4. configure optype
  temp = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a1b      	ldrb	r3, [r3, #8]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	791b      	ldrb	r3, [r3, #4]
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	617b      	str	r3, [r7, #20]
  pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	4619      	mov	r1, r3
 8000abe:	2301      	movs	r3, #1
 8000ac0:	408b      	lsls	r3, r1
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	400a      	ands	r2, r1
 8000acc:	605a      	str	r2, [r3, #4]
  pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6859      	ldr	r1, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	605a      	str	r2, [r3, #4]
  
  //5. configure alternate functionality
  temp = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	795b      	ldrb	r3, [r3, #5]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d831      	bhi.n	8000b4e <GPIO_Init+0x31a>
  {
    uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	791b      	ldrb	r3, [r3, #4]
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	743b      	strb	r3, [r7, #16]
    uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	73fb      	strb	r3, [r7, #15]
    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	7c3a      	ldrb	r2, [r7, #16]
 8000b02:	3208      	adds	r2, #8
 8000b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	7c3a      	ldrb	r2, [r7, #16]
 8000b1c:	4001      	ands	r1, r0
 8000b1e:	3208      	adds	r2, #8
 8000b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2) );
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	7c3a      	ldrb	r2, [r7, #16]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7a5b      	ldrb	r3, [r3, #9]
 8000b34:	461a      	mov	r2, r3
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	7c3a      	ldrb	r2, [r7, #16]
 8000b46:	4301      	orrs	r1, r0
 8000b48:	3208      	adds	r2, #8
 8000b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	40013c00 	.word	0x40013c00

08000b64 <GPIO_IRQInterruptConfig>:
}

/*
* IRQ configuration and ISR handling
*/
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI){
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	if (ENorDI == ENABLE)
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d133      	bne.n	8000be2 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b1f      	cmp	r3, #31
 8000b7e:	d80a      	bhi.n	8000b96 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000b80:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <GPIO_IRQInterruptConfig+0xf4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	2101      	movs	r1, #1
 8000b88:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4a32      	ldr	r2, [pc, #200]	; (8000c58 <GPIO_IRQInterruptConfig+0xf4>)
 8000b90:	430b      	orrs	r3, r1
 8000b92:	6013      	str	r3, [r2, #0]
				{
					//program ICER2 register //64 to 95
					*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
				}
	}
}
 8000b94:	e059      	b.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b1f      	cmp	r3, #31
 8000b9a:	d90f      	bls.n	8000bbc <GPIO_IRQInterruptConfig+0x58>
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000ba0:	d80c      	bhi.n	8000bbc <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << IRQNumber % 32 );
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <GPIO_IRQInterruptConfig+0xf8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	79fa      	ldrb	r2, [r7, #7]
 8000ba8:	f002 021f 	and.w	r2, r2, #31
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4a29      	ldr	r2, [pc, #164]	; (8000c5c <GPIO_IRQInterruptConfig+0xf8>)
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e046      	b.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber < 96)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc0:	d943      	bls.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b5f      	cmp	r3, #95	; 0x5f
 8000bc6:	d840      	bhi.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << IRQNumber % 64 );
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <GPIO_IRQInterruptConfig+0xfc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <GPIO_IRQInterruptConfig+0xfc>)
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	e033      	b.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d80a      	bhi.n	8000bfe <GPIO_IRQInterruptConfig+0x9a>
					*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <GPIO_IRQInterruptConfig+0x100>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <GPIO_IRQInterruptConfig+0x100>)
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	e025      	b.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
				else if (IRQNumber > 31 && IRQNumber < 64)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b1f      	cmp	r3, #31
 8000c02:	d90f      	bls.n	8000c24 <GPIO_IRQInterruptConfig+0xc0>
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b3f      	cmp	r3, #63	; 0x3f
 8000c08:	d80c      	bhi.n	8000c24 <GPIO_IRQInterruptConfig+0xc0>
					*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <GPIO_IRQInterruptConfig+0x104>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	f002 021f 	and.w	r2, r2, #31
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <GPIO_IRQInterruptConfig+0x104>)
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e012      	b.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
				else if (IRQNumber >= 64 && IRQNumber < 96)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b3f      	cmp	r3, #63	; 0x3f
 8000c28:	d90f      	bls.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c2e:	d80c      	bhi.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
					*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <GPIO_IRQInterruptConfig+0x108>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	79fa      	ldrb	r2, [r7, #7]
 8000c36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	4611      	mov	r1, r2
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <GPIO_IRQInterruptConfig+0x108>)
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	e7ff      	b.n	8000c4a <GPIO_IRQInterruptConfig+0xe6>
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000e104 	.word	0xe000e104
 8000c60:	e000e108 	.word	0xe000e108
 8000c64:	e000e180 	.word	0xe000e180
 8000c68:	e000e184 	.word	0xe000e184
 8000c6c:	e000e188 	.word	0xe000e188

08000c70 <GPIO_IRQPriorityConfig>:


void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
	//1. lets find out the ipr regsiter
	uint8_t iprx = IRQNumber / 4;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	3304      	adds	r3, #4
 8000c92:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000c9c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ca0:	6819      	ldr	r1, [r3, #0]
 8000ca2:	7b7b      	ldrb	r3, [r7, #13]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000cb0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	// clear the exti pr register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber))
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <GPIO_IRQHandling+0x3c>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	79fa      	ldrb	r2, [r7, #7]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= (1 << PinNumber);
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <GPIO_IRQHandling+0x3c>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	79fa      	ldrb	r2, [r7, #7]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <GPIO_IRQHandling+0x3c>)
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6153      	str	r3, [r2, #20]
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40013c00 	.word	0x40013c00

08000d04 <SPI_PeriClockControl>:
 * @param ENorDI Enalbe or disable
 *
 * @return void.
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t ENorDI)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE)
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d12b      	bne.n	8000d6e <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1){
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <SPI_PeriClockControl+0xcc>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d106      	bne.n	8000d2c <SPI_PeriClockControl+0x28>
		  SPI1_PCLK_EN();
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
		  SPI3_PCLK_DI();
		}else if(pSPIx == SPI4){
		  SPI4_PCLK_DI();
		}
	}
}
 8000d2a:	e04b      	b.n	8000dc4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <SPI_PeriClockControl+0xd4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d106      	bne.n	8000d42 <SPI_PeriClockControl+0x3e>
		  SPI2_PCLK_EN();
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d40:	e040      	b.n	8000dc4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <SPI_PeriClockControl+0xd8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d106      	bne.n	8000d58 <SPI_PeriClockControl+0x54>
		  SPI3_PCLK_EN();
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d56:	e035      	b.n	8000dc4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <SPI_PeriClockControl+0xdc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d131      	bne.n	8000dc4 <SPI_PeriClockControl+0xc0>
		  SPI4_PCLK_EN();
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d6a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d6c:	e02a      	b.n	8000dc4 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1){
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <SPI_PeriClockControl+0xcc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d106      	bne.n	8000d84 <SPI_PeriClockControl+0x80>
		  SPI1_PCLK_DI();
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d82:	e01f      	b.n	8000dc4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <SPI_PeriClockControl+0xd4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d106      	bne.n	8000d9a <SPI_PeriClockControl+0x96>
		  SPI2_PCLK_DI();
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d98:	e014      	b.n	8000dc4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3){
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <SPI_PeriClockControl+0xd8>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d106      	bne.n	8000db0 <SPI_PeriClockControl+0xac>
		  SPI3_PCLK_DI();
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dae:	e009      	b.n	8000dc4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <SPI_PeriClockControl+0xdc>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d105      	bne.n	8000dc4 <SPI_PeriClockControl+0xc0>
		  SPI4_PCLK_DI();
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SPI_PeriClockControl+0xd0>)
 8000dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dc2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40013000 	.word	0x40013000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40003800 	.word	0x40003800
 8000ddc:	40003c00 	.word	0x40003c00
 8000de0:	40013400 	.word	0x40013400

08000de4 <SPI_Init>:
* Peripheral Init and DeInit
* the logic here is just yo change values if they are not set be default!!
* Configure tempreg for all the CR1 reg
*/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	// first configure SPI_CR1  reg
	uint32_t tempreg = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]

	// Peripheral clock  enable : para não estar sempre a chama-lo na função MAIN
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff84 	bl	8000d04 <SPI_PeriClockControl>


	//1. conf the device mode - in bit field 2 of CR1 reg
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << 2;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	791b      	ldrb	r3, [r3, #4]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]

	//2. Conf Bus Config
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	795b      	ldrb	r3, [r3, #5]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d104      	bne.n	8000e1c <SPI_Init+0x38>
	{
		//bide mode should  bus cleared
		tempreg &= ~( 1 << 15);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e014      	b.n	8000e46 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d104      	bne.n	8000e2e <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << 15);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e00b      	b.n	8000e46 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	795b      	ldrb	r3, [r3, #5]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d107      	bne.n	8000e46 <SPI_Init+0x62>
	{
		// bidei mdoe should be cleared
		tempreg &= ~( 1 << 15);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e3c:	60fb      	str	r3, [r7, #12]
		// rxonly bit musi be set
		tempreg |= ( 1 << 10);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e44:	60fb      	str	r3, [r7, #12]
	}

	//3. Config the clock speed (baud rate)
	tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << 3;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	799b      	ldrb	r3, [r3, #6]
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

	//4. Config the DFF
	tempreg |= pSPIHandle->SPI_Config.SPI_DEF << 11;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	79db      	ldrb	r3, [r3, #7]
 8000e58:	02db      	lsls	r3, r3, #11
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]

	//4. Config the CPOL
	tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << 1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7a1b      	ldrb	r3, [r3, #8]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	461a      	mov	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

	//5. Config the CPHA
	tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << 0;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7a5b      	ldrb	r3, [r3, #9]
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

	//6. Config the SSM
	tempreg |= pSPIHandle->SPI_Config.SPI_SSM << 9;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7a9b      	ldrb	r3, [r3, #10]
 8000e80:	025b      	lsls	r3, r3, #9
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	601a      	str	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <SPI_GetFlagStatus>:
/*
 * Data send and receive
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SPI_IRQInterruptConfig>:

/*
* IRQ configuration and ISR handling
*/
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	71bb      	strb	r3, [r7, #6]
	if (ENorDI == ENABLE)
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d133      	bne.n	8000f42 <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b1f      	cmp	r3, #31
 8000ede:	d80a      	bhi.n	8000ef6 <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000ee0:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <SPI_IRQInterruptConfig+0xf4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	79fa      	ldrb	r2, [r7, #7]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	4611      	mov	r1, r2
 8000eee:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <SPI_IRQInterruptConfig+0xf4>)
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	6013      	str	r3, [r2, #0]
				{
					//program ICER2 register //64 to 95
					*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
				}
	}
}
 8000ef4:	e059      	b.n	8000faa <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64)
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b1f      	cmp	r3, #31
 8000efa:	d90f      	bls.n	8000f1c <SPI_IRQInterruptConfig+0x58>
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b3f      	cmp	r3, #63	; 0x3f
 8000f00:	d80c      	bhi.n	8000f1c <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << IRQNumber % 32 );
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <SPI_IRQInterruptConfig+0xf8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	f002 021f 	and.w	r2, r2, #31
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	4611      	mov	r1, r2
 8000f14:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <SPI_IRQInterruptConfig+0xf8>)
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e046      	b.n	8000faa <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber < 96)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f20:	d943      	bls.n	8000faa <SPI_IRQInterruptConfig+0xe6>
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b5f      	cmp	r3, #95	; 0x5f
 8000f26:	d840      	bhi.n	8000faa <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << IRQNumber % 64 );
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <SPI_IRQInterruptConfig+0xfc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	79fa      	ldrb	r2, [r7, #7]
 8000f2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <SPI_IRQInterruptConfig+0xfc>)
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	e033      	b.n	8000faa <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b1f      	cmp	r3, #31
 8000f46:	d80a      	bhi.n	8000f5e <SPI_IRQInterruptConfig+0x9a>
					*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <SPI_IRQInterruptConfig+0x100>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	79fa      	ldrb	r2, [r7, #7]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <SPI_IRQInterruptConfig+0x100>)
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	e025      	b.n	8000faa <SPI_IRQInterruptConfig+0xe6>
				else if (IRQNumber > 31 && IRQNumber < 64)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b1f      	cmp	r3, #31
 8000f62:	d90f      	bls.n	8000f84 <SPI_IRQInterruptConfig+0xc0>
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b3f      	cmp	r3, #63	; 0x3f
 8000f68:	d80c      	bhi.n	8000f84 <SPI_IRQInterruptConfig+0xc0>
					*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <SPI_IRQInterruptConfig+0x104>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	f002 021f 	and.w	r2, r2, #31
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <SPI_IRQInterruptConfig+0x104>)
 8000f7e:	430b      	orrs	r3, r1
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e012      	b.n	8000faa <SPI_IRQInterruptConfig+0xe6>
				else if (IRQNumber >= 64 && IRQNumber < 96)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b3f      	cmp	r3, #63	; 0x3f
 8000f88:	d90f      	bls.n	8000faa <SPI_IRQInterruptConfig+0xe6>
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b5f      	cmp	r3, #95	; 0x5f
 8000f8e:	d80c      	bhi.n	8000faa <SPI_IRQInterruptConfig+0xe6>
					*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <SPI_IRQInterruptConfig+0x108>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SPI_IRQInterruptConfig+0x108>)
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	e7ff      	b.n	8000faa <SPI_IRQInterruptConfig+0xe6>
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000e104 	.word	0xe000e104
 8000fc0:	e000e108 	.word	0xe000e108
 8000fc4:	e000e180 	.word	0xe000e180
 8000fc8:	e000e184 	.word	0xe000e184
 8000fcc:	e000e188 	.word	0xe000e188

08000fd0 <SPI_SendDataIT>:
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
}


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	7f1b      	ldrb	r3, [r3, #28]
 8000fe0:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d010      	beq.n	800100a <SPI_SendDataIT+0x3a>
	{
		//1 . Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	615a      	str	r2, [r3, #20]
		//2.  Mark the SPI state as busy in transmission so that
		//    no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_REG_TXEIE_BIT );
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001008:	605a      	str	r2, [r3, #4]

	}


	return state;
 800100a:	7dfb      	ldrb	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SPI_ReceiveDataIT>:


uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	7f5b      	ldrb	r3, [r3, #29]
 8001028:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d010      	beq.n	8001052 <SPI_ReceiveDataIT+0x3a>
	{
		//1 . Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
		//2.  Mark the SPI state as busy in reception so that
		//    no other code can take over same SPI peripheral until reception is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2201      	movs	r2, #1
 8001040:	775a      	strb	r2, [r3, #29]

		//3. Enable the RXNEIE control bit to get interrupt whenever RXNEIE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_REG_RXNEIE_BIT );
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001050:	605a      	str	r2, [r3, #4]

	}


	return state;
 8001052:	7dfb      	ldrb	r3, [r7, #23]

}
 8001054:	4618      	mov	r0, r3
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SPI_IRQHandling>:

void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	uint8_t temp1 , temp2;
	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_REG_TXE_BIT);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_REG_TXEIE_BIT);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001082:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <SPI_IRQHandling+0x36>
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f832 	bl	80010fa <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_REG_RXNE_BIT);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_REG_RXNEIE_BIT);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b0:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <SPI_IRQHandling+0x64>
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f85b 	bl	800117a <spi_rxne_interrupt_handle>
	}

	// check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_REG_OVR_BIT);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_REG_ERRIE_BIT);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <SPI_IRQHandling+0x92>
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f886 	bl	80011fe <spi_ovr_err_interrupt_handle>
	}

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <spi_txe_interrupt_handle>:


//some helper function implementations

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_REG_DFF_BIT) ) )
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800110c:	2b00      	cmp	r3, #0
 800110e:	d015      	beq.n	800113c <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	881a      	ldrh	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e00f      	b.n	800115c <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =   *pSPIHandle->pTxBuffer;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	1e5a      	subs	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d106      	bne.n	8001172 <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero , so close the spi transmission and inform the application that
		//TX is over.

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f89a 	bl	800129e <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 800116a:	2101      	movs	r1, #1
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff f97f 	bl	8000470 <SPI_ApplicationEventCallback>
	}

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if(pSPIHandle->pSPIx->CR1 & ( 1 << 11))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118c:	2b00      	cmp	r3, #0
 800118e:	d016      	beq.n	80011be <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	b292      	uxth	r2, r2
 800119c:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	1e9a      	subs	r2, r3, #2
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	e010      	b.n	80011e0 <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d106      	bne.n	80011f6 <spi_rxne_interrupt_handle+0x7c>
	{
		//reception is complete
		SPI_CloseReception(pSPIHandle);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f873 	bl	80012d4 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 80011ee:	2102      	movs	r1, #2
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff f93d 	bl	8000470 <SPI_ApplicationEventCallback>
	}

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7f1b      	ldrb	r3, [r3, #28]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d007      	beq.n	800121e <spi_ovr_err_interrupt_handle+0x20>
	{
		// as defined in datasheet, to clear ovr, just need to read the DR ans SR reg.
		temp = pSPIHandle->pSPIx->DR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp; // because we just needed to read we used the temp variable. (void) is for error purpose for not using temp.
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 800121e:	2103      	movs	r1, #3
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f925 	bl	8000470 <SPI_ApplicationEventCallback>

}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <SPI_PeripheralControl>:




void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t ENorDI)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	70fb      	strb	r3, [r7, #3]
	if (ENorDI == ENABLE)
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_REG_SPI_EN_BIT); //SPE
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_REG_SPI_EN_BIT); //SPE
	}

}
 800124c:	e005      	b.n	800125a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_REG_SPI_EN_BIT); //SPE
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	601a      	str	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <SPI_SSOEConfig>:
	}

}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t ENorDI)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	70fb      	strb	r3, [r7, #3]
	if (ENorDI == ENABLE)
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_REG_SSOE_BIT);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f043 0204 	orr.w	r2, r3, #4
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_REG_SSOE_BIT);
	}
}
 8001284:	e005      	b.n	8001292 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_REG_SSOE_BIT);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f023 0204 	bic.w	r2, r3, #4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	605a      	str	r2, [r3, #4]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <SPI_CloseTransmisson>:


void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_REG_TXEIE_BIT);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b4:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	771a      	strb	r2, [r3, #28]

}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_REG_RXNEIE_BIT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ea:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	775a      	strb	r2, [r3, #29]

}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <__errno>:
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <__errno+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000000 	.word	0x20000000

08001318 <__libc_init_array>:
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	4d0d      	ldr	r5, [pc, #52]	; (8001350 <__libc_init_array+0x38>)
 800131c:	4c0d      	ldr	r4, [pc, #52]	; (8001354 <__libc_init_array+0x3c>)
 800131e:	1b64      	subs	r4, r4, r5
 8001320:	10a4      	asrs	r4, r4, #2
 8001322:	2600      	movs	r6, #0
 8001324:	42a6      	cmp	r6, r4
 8001326:	d109      	bne.n	800133c <__libc_init_array+0x24>
 8001328:	4d0b      	ldr	r5, [pc, #44]	; (8001358 <__libc_init_array+0x40>)
 800132a:	4c0c      	ldr	r4, [pc, #48]	; (800135c <__libc_init_array+0x44>)
 800132c:	f000 ff76 	bl	800221c <_init>
 8001330:	1b64      	subs	r4, r4, r5
 8001332:	10a4      	asrs	r4, r4, #2
 8001334:	2600      	movs	r6, #0
 8001336:	42a6      	cmp	r6, r4
 8001338:	d105      	bne.n	8001346 <__libc_init_array+0x2e>
 800133a:	bd70      	pop	{r4, r5, r6, pc}
 800133c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001340:	4798      	blx	r3
 8001342:	3601      	adds	r6, #1
 8001344:	e7ee      	b.n	8001324 <__libc_init_array+0xc>
 8001346:	f855 3b04 	ldr.w	r3, [r5], #4
 800134a:	4798      	blx	r3
 800134c:	3601      	adds	r6, #1
 800134e:	e7f2      	b.n	8001336 <__libc_init_array+0x1e>
 8001350:	080022dc 	.word	0x080022dc
 8001354:	080022dc 	.word	0x080022dc
 8001358:	080022dc 	.word	0x080022dc
 800135c:	080022e0 	.word	0x080022e0

08001360 <memset>:
 8001360:	4402      	add	r2, r0
 8001362:	4603      	mov	r3, r0
 8001364:	4293      	cmp	r3, r2
 8001366:	d100      	bne.n	800136a <memset+0xa>
 8001368:	4770      	bx	lr
 800136a:	f803 1b01 	strb.w	r1, [r3], #1
 800136e:	e7f9      	b.n	8001364 <memset+0x4>

08001370 <iprintf>:
 8001370:	b40f      	push	{r0, r1, r2, r3}
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <iprintf+0x2c>)
 8001374:	b513      	push	{r0, r1, r4, lr}
 8001376:	681c      	ldr	r4, [r3, #0]
 8001378:	b124      	cbz	r4, 8001384 <iprintf+0x14>
 800137a:	69a3      	ldr	r3, [r4, #24]
 800137c:	b913      	cbnz	r3, 8001384 <iprintf+0x14>
 800137e:	4620      	mov	r0, r4
 8001380:	f000 f866 	bl	8001450 <__sinit>
 8001384:	ab05      	add	r3, sp, #20
 8001386:	9a04      	ldr	r2, [sp, #16]
 8001388:	68a1      	ldr	r1, [r4, #8]
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	4620      	mov	r0, r4
 800138e:	f000 f983 	bl	8001698 <_vfiprintf_r>
 8001392:	b002      	add	sp, #8
 8001394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001398:	b004      	add	sp, #16
 800139a:	4770      	bx	lr
 800139c:	20000000 	.word	0x20000000

080013a0 <std>:
 80013a0:	2300      	movs	r3, #0
 80013a2:	b510      	push	{r4, lr}
 80013a4:	4604      	mov	r4, r0
 80013a6:	e9c0 3300 	strd	r3, r3, [r0]
 80013aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013ae:	6083      	str	r3, [r0, #8]
 80013b0:	8181      	strh	r1, [r0, #12]
 80013b2:	6643      	str	r3, [r0, #100]	; 0x64
 80013b4:	81c2      	strh	r2, [r0, #14]
 80013b6:	6183      	str	r3, [r0, #24]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2208      	movs	r2, #8
 80013bc:	305c      	adds	r0, #92	; 0x5c
 80013be:	f7ff ffcf 	bl	8001360 <memset>
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <std+0x38>)
 80013c4:	6263      	str	r3, [r4, #36]	; 0x24
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <std+0x3c>)
 80013c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <std+0x40>)
 80013cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <std+0x44>)
 80013d0:	6224      	str	r4, [r4, #32]
 80013d2:	6323      	str	r3, [r4, #48]	; 0x30
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	08001c41 	.word	0x08001c41
 80013dc:	08001c63 	.word	0x08001c63
 80013e0:	08001c9b 	.word	0x08001c9b
 80013e4:	08001cbf 	.word	0x08001cbf

080013e8 <_cleanup_r>:
 80013e8:	4901      	ldr	r1, [pc, #4]	; (80013f0 <_cleanup_r+0x8>)
 80013ea:	f000 b8af 	b.w	800154c <_fwalk_reent>
 80013ee:	bf00      	nop
 80013f0:	08001f99 	.word	0x08001f99

080013f4 <__sfmoreglue>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	1e4a      	subs	r2, r1, #1
 80013f8:	2568      	movs	r5, #104	; 0x68
 80013fa:	4355      	muls	r5, r2
 80013fc:	460e      	mov	r6, r1
 80013fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001402:	f000 f8c5 	bl	8001590 <_malloc_r>
 8001406:	4604      	mov	r4, r0
 8001408:	b140      	cbz	r0, 800141c <__sfmoreglue+0x28>
 800140a:	2100      	movs	r1, #0
 800140c:	e9c0 1600 	strd	r1, r6, [r0]
 8001410:	300c      	adds	r0, #12
 8001412:	60a0      	str	r0, [r4, #8]
 8001414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001418:	f7ff ffa2 	bl	8001360 <memset>
 800141c:	4620      	mov	r0, r4
 800141e:	bd70      	pop	{r4, r5, r6, pc}

08001420 <__sfp_lock_acquire>:
 8001420:	4801      	ldr	r0, [pc, #4]	; (8001428 <__sfp_lock_acquire+0x8>)
 8001422:	f000 b8b3 	b.w	800158c <__retarget_lock_acquire_recursive>
 8001426:	bf00      	nop
 8001428:	200002b4 	.word	0x200002b4

0800142c <__sfp_lock_release>:
 800142c:	4801      	ldr	r0, [pc, #4]	; (8001434 <__sfp_lock_release+0x8>)
 800142e:	f000 b8ae 	b.w	800158e <__retarget_lock_release_recursive>
 8001432:	bf00      	nop
 8001434:	200002b4 	.word	0x200002b4

08001438 <__sinit_lock_acquire>:
 8001438:	4801      	ldr	r0, [pc, #4]	; (8001440 <__sinit_lock_acquire+0x8>)
 800143a:	f000 b8a7 	b.w	800158c <__retarget_lock_acquire_recursive>
 800143e:	bf00      	nop
 8001440:	200002af 	.word	0x200002af

08001444 <__sinit_lock_release>:
 8001444:	4801      	ldr	r0, [pc, #4]	; (800144c <__sinit_lock_release+0x8>)
 8001446:	f000 b8a2 	b.w	800158e <__retarget_lock_release_recursive>
 800144a:	bf00      	nop
 800144c:	200002af 	.word	0x200002af

08001450 <__sinit>:
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
 8001454:	f7ff fff0 	bl	8001438 <__sinit_lock_acquire>
 8001458:	69a3      	ldr	r3, [r4, #24]
 800145a:	b11b      	cbz	r3, 8001464 <__sinit+0x14>
 800145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001460:	f7ff bff0 	b.w	8001444 <__sinit_lock_release>
 8001464:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001468:	6523      	str	r3, [r4, #80]	; 0x50
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <__sinit+0x68>)
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <__sinit+0x6c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	62a2      	str	r2, [r4, #40]	; 0x28
 8001472:	42a3      	cmp	r3, r4
 8001474:	bf04      	itt	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	61a3      	streq	r3, [r4, #24]
 800147a:	4620      	mov	r0, r4
 800147c:	f000 f820 	bl	80014c0 <__sfp>
 8001480:	6060      	str	r0, [r4, #4]
 8001482:	4620      	mov	r0, r4
 8001484:	f000 f81c 	bl	80014c0 <__sfp>
 8001488:	60a0      	str	r0, [r4, #8]
 800148a:	4620      	mov	r0, r4
 800148c:	f000 f818 	bl	80014c0 <__sfp>
 8001490:	2200      	movs	r2, #0
 8001492:	60e0      	str	r0, [r4, #12]
 8001494:	2104      	movs	r1, #4
 8001496:	6860      	ldr	r0, [r4, #4]
 8001498:	f7ff ff82 	bl	80013a0 <std>
 800149c:	68a0      	ldr	r0, [r4, #8]
 800149e:	2201      	movs	r2, #1
 80014a0:	2109      	movs	r1, #9
 80014a2:	f7ff ff7d 	bl	80013a0 <std>
 80014a6:	68e0      	ldr	r0, [r4, #12]
 80014a8:	2202      	movs	r2, #2
 80014aa:	2112      	movs	r1, #18
 80014ac:	f7ff ff78 	bl	80013a0 <std>
 80014b0:	2301      	movs	r3, #1
 80014b2:	61a3      	str	r3, [r4, #24]
 80014b4:	e7d2      	b.n	800145c <__sinit+0xc>
 80014b6:	bf00      	nop
 80014b8:	08002244 	.word	0x08002244
 80014bc:	080013e9 	.word	0x080013e9

080014c0 <__sfp>:
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	4607      	mov	r7, r0
 80014c4:	f7ff ffac 	bl	8001420 <__sfp_lock_acquire>
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <__sfp+0x84>)
 80014ca:	681e      	ldr	r6, [r3, #0]
 80014cc:	69b3      	ldr	r3, [r6, #24]
 80014ce:	b913      	cbnz	r3, 80014d6 <__sfp+0x16>
 80014d0:	4630      	mov	r0, r6
 80014d2:	f7ff ffbd 	bl	8001450 <__sinit>
 80014d6:	3648      	adds	r6, #72	; 0x48
 80014d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	d503      	bpl.n	80014e8 <__sfp+0x28>
 80014e0:	6833      	ldr	r3, [r6, #0]
 80014e2:	b30b      	cbz	r3, 8001528 <__sfp+0x68>
 80014e4:	6836      	ldr	r6, [r6, #0]
 80014e6:	e7f7      	b.n	80014d8 <__sfp+0x18>
 80014e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014ec:	b9d5      	cbnz	r5, 8001524 <__sfp+0x64>
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <__sfp+0x88>)
 80014f0:	60e3      	str	r3, [r4, #12]
 80014f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80014f6:	6665      	str	r5, [r4, #100]	; 0x64
 80014f8:	f000 f847 	bl	800158a <__retarget_lock_init_recursive>
 80014fc:	f7ff ff96 	bl	800142c <__sfp_lock_release>
 8001500:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001504:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001508:	6025      	str	r5, [r4, #0]
 800150a:	61a5      	str	r5, [r4, #24]
 800150c:	2208      	movs	r2, #8
 800150e:	4629      	mov	r1, r5
 8001510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001514:	f7ff ff24 	bl	8001360 <memset>
 8001518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800151c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001520:	4620      	mov	r0, r4
 8001522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001524:	3468      	adds	r4, #104	; 0x68
 8001526:	e7d9      	b.n	80014dc <__sfp+0x1c>
 8001528:	2104      	movs	r1, #4
 800152a:	4638      	mov	r0, r7
 800152c:	f7ff ff62 	bl	80013f4 <__sfmoreglue>
 8001530:	4604      	mov	r4, r0
 8001532:	6030      	str	r0, [r6, #0]
 8001534:	2800      	cmp	r0, #0
 8001536:	d1d5      	bne.n	80014e4 <__sfp+0x24>
 8001538:	f7ff ff78 	bl	800142c <__sfp_lock_release>
 800153c:	230c      	movs	r3, #12
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	e7ee      	b.n	8001520 <__sfp+0x60>
 8001542:	bf00      	nop
 8001544:	08002244 	.word	0x08002244
 8001548:	ffff0001 	.word	0xffff0001

0800154c <_fwalk_reent>:
 800154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001550:	4606      	mov	r6, r0
 8001552:	4688      	mov	r8, r1
 8001554:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001558:	2700      	movs	r7, #0
 800155a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800155e:	f1b9 0901 	subs.w	r9, r9, #1
 8001562:	d505      	bpl.n	8001570 <_fwalk_reent+0x24>
 8001564:	6824      	ldr	r4, [r4, #0]
 8001566:	2c00      	cmp	r4, #0
 8001568:	d1f7      	bne.n	800155a <_fwalk_reent+0xe>
 800156a:	4638      	mov	r0, r7
 800156c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001570:	89ab      	ldrh	r3, [r5, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d907      	bls.n	8001586 <_fwalk_reent+0x3a>
 8001576:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800157a:	3301      	adds	r3, #1
 800157c:	d003      	beq.n	8001586 <_fwalk_reent+0x3a>
 800157e:	4629      	mov	r1, r5
 8001580:	4630      	mov	r0, r6
 8001582:	47c0      	blx	r8
 8001584:	4307      	orrs	r7, r0
 8001586:	3568      	adds	r5, #104	; 0x68
 8001588:	e7e9      	b.n	800155e <_fwalk_reent+0x12>

0800158a <__retarget_lock_init_recursive>:
 800158a:	4770      	bx	lr

0800158c <__retarget_lock_acquire_recursive>:
 800158c:	4770      	bx	lr

0800158e <__retarget_lock_release_recursive>:
 800158e:	4770      	bx	lr

08001590 <_malloc_r>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	1ccd      	adds	r5, r1, #3
 8001594:	f025 0503 	bic.w	r5, r5, #3
 8001598:	3508      	adds	r5, #8
 800159a:	2d0c      	cmp	r5, #12
 800159c:	bf38      	it	cc
 800159e:	250c      	movcc	r5, #12
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	4606      	mov	r6, r0
 80015a4:	db01      	blt.n	80015aa <_malloc_r+0x1a>
 80015a6:	42a9      	cmp	r1, r5
 80015a8:	d903      	bls.n	80015b2 <_malloc_r+0x22>
 80015aa:	230c      	movs	r3, #12
 80015ac:	6033      	str	r3, [r6, #0]
 80015ae:	2000      	movs	r0, #0
 80015b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b2:	f000 fda3 	bl	80020fc <__malloc_lock>
 80015b6:	4921      	ldr	r1, [pc, #132]	; (800163c <_malloc_r+0xac>)
 80015b8:	680a      	ldr	r2, [r1, #0]
 80015ba:	4614      	mov	r4, r2
 80015bc:	b99c      	cbnz	r4, 80015e6 <_malloc_r+0x56>
 80015be:	4f20      	ldr	r7, [pc, #128]	; (8001640 <_malloc_r+0xb0>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b923      	cbnz	r3, 80015ce <_malloc_r+0x3e>
 80015c4:	4621      	mov	r1, r4
 80015c6:	4630      	mov	r0, r6
 80015c8:	f000 fb2a 	bl	8001c20 <_sbrk_r>
 80015cc:	6038      	str	r0, [r7, #0]
 80015ce:	4629      	mov	r1, r5
 80015d0:	4630      	mov	r0, r6
 80015d2:	f000 fb25 	bl	8001c20 <_sbrk_r>
 80015d6:	1c43      	adds	r3, r0, #1
 80015d8:	d123      	bne.n	8001622 <_malloc_r+0x92>
 80015da:	230c      	movs	r3, #12
 80015dc:	6033      	str	r3, [r6, #0]
 80015de:	4630      	mov	r0, r6
 80015e0:	f000 fd92 	bl	8002108 <__malloc_unlock>
 80015e4:	e7e3      	b.n	80015ae <_malloc_r+0x1e>
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	1b5b      	subs	r3, r3, r5
 80015ea:	d417      	bmi.n	800161c <_malloc_r+0x8c>
 80015ec:	2b0b      	cmp	r3, #11
 80015ee:	d903      	bls.n	80015f8 <_malloc_r+0x68>
 80015f0:	6023      	str	r3, [r4, #0]
 80015f2:	441c      	add	r4, r3
 80015f4:	6025      	str	r5, [r4, #0]
 80015f6:	e004      	b.n	8001602 <_malloc_r+0x72>
 80015f8:	6863      	ldr	r3, [r4, #4]
 80015fa:	42a2      	cmp	r2, r4
 80015fc:	bf0c      	ite	eq
 80015fe:	600b      	streq	r3, [r1, #0]
 8001600:	6053      	strne	r3, [r2, #4]
 8001602:	4630      	mov	r0, r6
 8001604:	f000 fd80 	bl	8002108 <__malloc_unlock>
 8001608:	f104 000b 	add.w	r0, r4, #11
 800160c:	1d23      	adds	r3, r4, #4
 800160e:	f020 0007 	bic.w	r0, r0, #7
 8001612:	1ac2      	subs	r2, r0, r3
 8001614:	d0cc      	beq.n	80015b0 <_malloc_r+0x20>
 8001616:	1a1b      	subs	r3, r3, r0
 8001618:	50a3      	str	r3, [r4, r2]
 800161a:	e7c9      	b.n	80015b0 <_malloc_r+0x20>
 800161c:	4622      	mov	r2, r4
 800161e:	6864      	ldr	r4, [r4, #4]
 8001620:	e7cc      	b.n	80015bc <_malloc_r+0x2c>
 8001622:	1cc4      	adds	r4, r0, #3
 8001624:	f024 0403 	bic.w	r4, r4, #3
 8001628:	42a0      	cmp	r0, r4
 800162a:	d0e3      	beq.n	80015f4 <_malloc_r+0x64>
 800162c:	1a21      	subs	r1, r4, r0
 800162e:	4630      	mov	r0, r6
 8001630:	f000 faf6 	bl	8001c20 <_sbrk_r>
 8001634:	3001      	adds	r0, #1
 8001636:	d1dd      	bne.n	80015f4 <_malloc_r+0x64>
 8001638:	e7cf      	b.n	80015da <_malloc_r+0x4a>
 800163a:	bf00      	nop
 800163c:	2000008c 	.word	0x2000008c
 8001640:	20000090 	.word	0x20000090

08001644 <__sfputc_r>:
 8001644:	6893      	ldr	r3, [r2, #8]
 8001646:	3b01      	subs	r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	b410      	push	{r4}
 800164c:	6093      	str	r3, [r2, #8]
 800164e:	da08      	bge.n	8001662 <__sfputc_r+0x1e>
 8001650:	6994      	ldr	r4, [r2, #24]
 8001652:	42a3      	cmp	r3, r4
 8001654:	db01      	blt.n	800165a <__sfputc_r+0x16>
 8001656:	290a      	cmp	r1, #10
 8001658:	d103      	bne.n	8001662 <__sfputc_r+0x1e>
 800165a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800165e:	f000 bb33 	b.w	8001cc8 <__swbuf_r>
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	1c58      	adds	r0, r3, #1
 8001666:	6010      	str	r0, [r2, #0]
 8001668:	7019      	strb	r1, [r3, #0]
 800166a:	4608      	mov	r0, r1
 800166c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001670:	4770      	bx	lr

08001672 <__sfputs_r>:
 8001672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001674:	4606      	mov	r6, r0
 8001676:	460f      	mov	r7, r1
 8001678:	4614      	mov	r4, r2
 800167a:	18d5      	adds	r5, r2, r3
 800167c:	42ac      	cmp	r4, r5
 800167e:	d101      	bne.n	8001684 <__sfputs_r+0x12>
 8001680:	2000      	movs	r0, #0
 8001682:	e007      	b.n	8001694 <__sfputs_r+0x22>
 8001684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001688:	463a      	mov	r2, r7
 800168a:	4630      	mov	r0, r6
 800168c:	f7ff ffda 	bl	8001644 <__sfputc_r>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d1f3      	bne.n	800167c <__sfputs_r+0xa>
 8001694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001698 <_vfiprintf_r>:
 8001698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169c:	460d      	mov	r5, r1
 800169e:	b09d      	sub	sp, #116	; 0x74
 80016a0:	4614      	mov	r4, r2
 80016a2:	4698      	mov	r8, r3
 80016a4:	4606      	mov	r6, r0
 80016a6:	b118      	cbz	r0, 80016b0 <_vfiprintf_r+0x18>
 80016a8:	6983      	ldr	r3, [r0, #24]
 80016aa:	b90b      	cbnz	r3, 80016b0 <_vfiprintf_r+0x18>
 80016ac:	f7ff fed0 	bl	8001450 <__sinit>
 80016b0:	4b89      	ldr	r3, [pc, #548]	; (80018d8 <_vfiprintf_r+0x240>)
 80016b2:	429d      	cmp	r5, r3
 80016b4:	d11b      	bne.n	80016ee <_vfiprintf_r+0x56>
 80016b6:	6875      	ldr	r5, [r6, #4]
 80016b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016ba:	07d9      	lsls	r1, r3, #31
 80016bc:	d405      	bmi.n	80016ca <_vfiprintf_r+0x32>
 80016be:	89ab      	ldrh	r3, [r5, #12]
 80016c0:	059a      	lsls	r2, r3, #22
 80016c2:	d402      	bmi.n	80016ca <_vfiprintf_r+0x32>
 80016c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016c6:	f7ff ff61 	bl	800158c <__retarget_lock_acquire_recursive>
 80016ca:	89ab      	ldrh	r3, [r5, #12]
 80016cc:	071b      	lsls	r3, r3, #28
 80016ce:	d501      	bpl.n	80016d4 <_vfiprintf_r+0x3c>
 80016d0:	692b      	ldr	r3, [r5, #16]
 80016d2:	b9eb      	cbnz	r3, 8001710 <_vfiprintf_r+0x78>
 80016d4:	4629      	mov	r1, r5
 80016d6:	4630      	mov	r0, r6
 80016d8:	f000 fb5a 	bl	8001d90 <__swsetup_r>
 80016dc:	b1c0      	cbz	r0, 8001710 <_vfiprintf_r+0x78>
 80016de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016e0:	07dc      	lsls	r4, r3, #31
 80016e2:	d50e      	bpl.n	8001702 <_vfiprintf_r+0x6a>
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	b01d      	add	sp, #116	; 0x74
 80016ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <_vfiprintf_r+0x244>)
 80016f0:	429d      	cmp	r5, r3
 80016f2:	d101      	bne.n	80016f8 <_vfiprintf_r+0x60>
 80016f4:	68b5      	ldr	r5, [r6, #8]
 80016f6:	e7df      	b.n	80016b8 <_vfiprintf_r+0x20>
 80016f8:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <_vfiprintf_r+0x248>)
 80016fa:	429d      	cmp	r5, r3
 80016fc:	bf08      	it	eq
 80016fe:	68f5      	ldreq	r5, [r6, #12]
 8001700:	e7da      	b.n	80016b8 <_vfiprintf_r+0x20>
 8001702:	89ab      	ldrh	r3, [r5, #12]
 8001704:	0598      	lsls	r0, r3, #22
 8001706:	d4ed      	bmi.n	80016e4 <_vfiprintf_r+0x4c>
 8001708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800170a:	f7ff ff40 	bl	800158e <__retarget_lock_release_recursive>
 800170e:	e7e9      	b.n	80016e4 <_vfiprintf_r+0x4c>
 8001710:	2300      	movs	r3, #0
 8001712:	9309      	str	r3, [sp, #36]	; 0x24
 8001714:	2320      	movs	r3, #32
 8001716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800171a:	f8cd 800c 	str.w	r8, [sp, #12]
 800171e:	2330      	movs	r3, #48	; 0x30
 8001720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80018e4 <_vfiprintf_r+0x24c>
 8001724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001728:	f04f 0901 	mov.w	r9, #1
 800172c:	4623      	mov	r3, r4
 800172e:	469a      	mov	sl, r3
 8001730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001734:	b10a      	cbz	r2, 800173a <_vfiprintf_r+0xa2>
 8001736:	2a25      	cmp	r2, #37	; 0x25
 8001738:	d1f9      	bne.n	800172e <_vfiprintf_r+0x96>
 800173a:	ebba 0b04 	subs.w	fp, sl, r4
 800173e:	d00b      	beq.n	8001758 <_vfiprintf_r+0xc0>
 8001740:	465b      	mov	r3, fp
 8001742:	4622      	mov	r2, r4
 8001744:	4629      	mov	r1, r5
 8001746:	4630      	mov	r0, r6
 8001748:	f7ff ff93 	bl	8001672 <__sfputs_r>
 800174c:	3001      	adds	r0, #1
 800174e:	f000 80aa 	beq.w	80018a6 <_vfiprintf_r+0x20e>
 8001752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001754:	445a      	add	r2, fp
 8001756:	9209      	str	r2, [sp, #36]	; 0x24
 8001758:	f89a 3000 	ldrb.w	r3, [sl]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a2 	beq.w	80018a6 <_vfiprintf_r+0x20e>
 8001762:	2300      	movs	r3, #0
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800176c:	f10a 0a01 	add.w	sl, sl, #1
 8001770:	9304      	str	r3, [sp, #16]
 8001772:	9307      	str	r3, [sp, #28]
 8001774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001778:	931a      	str	r3, [sp, #104]	; 0x68
 800177a:	4654      	mov	r4, sl
 800177c:	2205      	movs	r2, #5
 800177e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001782:	4858      	ldr	r0, [pc, #352]	; (80018e4 <_vfiprintf_r+0x24c>)
 8001784:	f7fe fd44 	bl	8000210 <memchr>
 8001788:	9a04      	ldr	r2, [sp, #16]
 800178a:	b9d8      	cbnz	r0, 80017c4 <_vfiprintf_r+0x12c>
 800178c:	06d1      	lsls	r1, r2, #27
 800178e:	bf44      	itt	mi
 8001790:	2320      	movmi	r3, #32
 8001792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001796:	0713      	lsls	r3, r2, #28
 8001798:	bf44      	itt	mi
 800179a:	232b      	movmi	r3, #43	; 0x2b
 800179c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017a0:	f89a 3000 	ldrb.w	r3, [sl]
 80017a4:	2b2a      	cmp	r3, #42	; 0x2a
 80017a6:	d015      	beq.n	80017d4 <_vfiprintf_r+0x13c>
 80017a8:	9a07      	ldr	r2, [sp, #28]
 80017aa:	4654      	mov	r4, sl
 80017ac:	2000      	movs	r0, #0
 80017ae:	f04f 0c0a 	mov.w	ip, #10
 80017b2:	4621      	mov	r1, r4
 80017b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017b8:	3b30      	subs	r3, #48	; 0x30
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d94e      	bls.n	800185c <_vfiprintf_r+0x1c4>
 80017be:	b1b0      	cbz	r0, 80017ee <_vfiprintf_r+0x156>
 80017c0:	9207      	str	r2, [sp, #28]
 80017c2:	e014      	b.n	80017ee <_vfiprintf_r+0x156>
 80017c4:	eba0 0308 	sub.w	r3, r0, r8
 80017c8:	fa09 f303 	lsl.w	r3, r9, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	9304      	str	r3, [sp, #16]
 80017d0:	46a2      	mov	sl, r4
 80017d2:	e7d2      	b.n	800177a <_vfiprintf_r+0xe2>
 80017d4:	9b03      	ldr	r3, [sp, #12]
 80017d6:	1d19      	adds	r1, r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	9103      	str	r1, [sp, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bfbb      	ittet	lt
 80017e0:	425b      	neglt	r3, r3
 80017e2:	f042 0202 	orrlt.w	r2, r2, #2
 80017e6:	9307      	strge	r3, [sp, #28]
 80017e8:	9307      	strlt	r3, [sp, #28]
 80017ea:	bfb8      	it	lt
 80017ec:	9204      	strlt	r2, [sp, #16]
 80017ee:	7823      	ldrb	r3, [r4, #0]
 80017f0:	2b2e      	cmp	r3, #46	; 0x2e
 80017f2:	d10c      	bne.n	800180e <_vfiprintf_r+0x176>
 80017f4:	7863      	ldrb	r3, [r4, #1]
 80017f6:	2b2a      	cmp	r3, #42	; 0x2a
 80017f8:	d135      	bne.n	8001866 <_vfiprintf_r+0x1ce>
 80017fa:	9b03      	ldr	r3, [sp, #12]
 80017fc:	1d1a      	adds	r2, r3, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	9203      	str	r2, [sp, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	bfb8      	it	lt
 8001806:	f04f 33ff 	movlt.w	r3, #4294967295
 800180a:	3402      	adds	r4, #2
 800180c:	9305      	str	r3, [sp, #20]
 800180e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80018f4 <_vfiprintf_r+0x25c>
 8001812:	7821      	ldrb	r1, [r4, #0]
 8001814:	2203      	movs	r2, #3
 8001816:	4650      	mov	r0, sl
 8001818:	f7fe fcfa 	bl	8000210 <memchr>
 800181c:	b140      	cbz	r0, 8001830 <_vfiprintf_r+0x198>
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	eba0 000a 	sub.w	r0, r0, sl
 8001824:	fa03 f000 	lsl.w	r0, r3, r0
 8001828:	9b04      	ldr	r3, [sp, #16]
 800182a:	4303      	orrs	r3, r0
 800182c:	3401      	adds	r4, #1
 800182e:	9304      	str	r3, [sp, #16]
 8001830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001834:	482c      	ldr	r0, [pc, #176]	; (80018e8 <_vfiprintf_r+0x250>)
 8001836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800183a:	2206      	movs	r2, #6
 800183c:	f7fe fce8 	bl	8000210 <memchr>
 8001840:	2800      	cmp	r0, #0
 8001842:	d03f      	beq.n	80018c4 <_vfiprintf_r+0x22c>
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <_vfiprintf_r+0x254>)
 8001846:	bb1b      	cbnz	r3, 8001890 <_vfiprintf_r+0x1f8>
 8001848:	9b03      	ldr	r3, [sp, #12]
 800184a:	3307      	adds	r3, #7
 800184c:	f023 0307 	bic.w	r3, r3, #7
 8001850:	3308      	adds	r3, #8
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001856:	443b      	add	r3, r7
 8001858:	9309      	str	r3, [sp, #36]	; 0x24
 800185a:	e767      	b.n	800172c <_vfiprintf_r+0x94>
 800185c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001860:	460c      	mov	r4, r1
 8001862:	2001      	movs	r0, #1
 8001864:	e7a5      	b.n	80017b2 <_vfiprintf_r+0x11a>
 8001866:	2300      	movs	r3, #0
 8001868:	3401      	adds	r4, #1
 800186a:	9305      	str	r3, [sp, #20]
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 0c0a 	mov.w	ip, #10
 8001872:	4620      	mov	r0, r4
 8001874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001878:	3a30      	subs	r2, #48	; 0x30
 800187a:	2a09      	cmp	r2, #9
 800187c:	d903      	bls.n	8001886 <_vfiprintf_r+0x1ee>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0c5      	beq.n	800180e <_vfiprintf_r+0x176>
 8001882:	9105      	str	r1, [sp, #20]
 8001884:	e7c3      	b.n	800180e <_vfiprintf_r+0x176>
 8001886:	fb0c 2101 	mla	r1, ip, r1, r2
 800188a:	4604      	mov	r4, r0
 800188c:	2301      	movs	r3, #1
 800188e:	e7f0      	b.n	8001872 <_vfiprintf_r+0x1da>
 8001890:	ab03      	add	r3, sp, #12
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	462a      	mov	r2, r5
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <_vfiprintf_r+0x258>)
 8001898:	a904      	add	r1, sp, #16
 800189a:	4630      	mov	r0, r6
 800189c:	f3af 8000 	nop.w
 80018a0:	4607      	mov	r7, r0
 80018a2:	1c78      	adds	r0, r7, #1
 80018a4:	d1d6      	bne.n	8001854 <_vfiprintf_r+0x1bc>
 80018a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018a8:	07d9      	lsls	r1, r3, #31
 80018aa:	d405      	bmi.n	80018b8 <_vfiprintf_r+0x220>
 80018ac:	89ab      	ldrh	r3, [r5, #12]
 80018ae:	059a      	lsls	r2, r3, #22
 80018b0:	d402      	bmi.n	80018b8 <_vfiprintf_r+0x220>
 80018b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018b4:	f7ff fe6b 	bl	800158e <__retarget_lock_release_recursive>
 80018b8:	89ab      	ldrh	r3, [r5, #12]
 80018ba:	065b      	lsls	r3, r3, #25
 80018bc:	f53f af12 	bmi.w	80016e4 <_vfiprintf_r+0x4c>
 80018c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018c2:	e711      	b.n	80016e8 <_vfiprintf_r+0x50>
 80018c4:	ab03      	add	r3, sp, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	462a      	mov	r2, r5
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <_vfiprintf_r+0x258>)
 80018cc:	a904      	add	r1, sp, #16
 80018ce:	4630      	mov	r0, r6
 80018d0:	f000 f880 	bl	80019d4 <_printf_i>
 80018d4:	e7e4      	b.n	80018a0 <_vfiprintf_r+0x208>
 80018d6:	bf00      	nop
 80018d8:	08002268 	.word	0x08002268
 80018dc:	08002288 	.word	0x08002288
 80018e0:	08002248 	.word	0x08002248
 80018e4:	080022a8 	.word	0x080022a8
 80018e8:	080022b2 	.word	0x080022b2
 80018ec:	00000000 	.word	0x00000000
 80018f0:	08001673 	.word	0x08001673
 80018f4:	080022ae 	.word	0x080022ae

080018f8 <_printf_common>:
 80018f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018fc:	4616      	mov	r6, r2
 80018fe:	4699      	mov	r9, r3
 8001900:	688a      	ldr	r2, [r1, #8]
 8001902:	690b      	ldr	r3, [r1, #16]
 8001904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001908:	4293      	cmp	r3, r2
 800190a:	bfb8      	it	lt
 800190c:	4613      	movlt	r3, r2
 800190e:	6033      	str	r3, [r6, #0]
 8001910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001914:	4607      	mov	r7, r0
 8001916:	460c      	mov	r4, r1
 8001918:	b10a      	cbz	r2, 800191e <_printf_common+0x26>
 800191a:	3301      	adds	r3, #1
 800191c:	6033      	str	r3, [r6, #0]
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	0699      	lsls	r1, r3, #26
 8001922:	bf42      	ittt	mi
 8001924:	6833      	ldrmi	r3, [r6, #0]
 8001926:	3302      	addmi	r3, #2
 8001928:	6033      	strmi	r3, [r6, #0]
 800192a:	6825      	ldr	r5, [r4, #0]
 800192c:	f015 0506 	ands.w	r5, r5, #6
 8001930:	d106      	bne.n	8001940 <_printf_common+0x48>
 8001932:	f104 0a19 	add.w	sl, r4, #25
 8001936:	68e3      	ldr	r3, [r4, #12]
 8001938:	6832      	ldr	r2, [r6, #0]
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	42ab      	cmp	r3, r5
 800193e:	dc26      	bgt.n	800198e <_printf_common+0x96>
 8001940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001944:	1e13      	subs	r3, r2, #0
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	bf18      	it	ne
 800194a:	2301      	movne	r3, #1
 800194c:	0692      	lsls	r2, r2, #26
 800194e:	d42b      	bmi.n	80019a8 <_printf_common+0xb0>
 8001950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001954:	4649      	mov	r1, r9
 8001956:	4638      	mov	r0, r7
 8001958:	47c0      	blx	r8
 800195a:	3001      	adds	r0, #1
 800195c:	d01e      	beq.n	800199c <_printf_common+0xa4>
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	68e5      	ldr	r5, [r4, #12]
 8001962:	6832      	ldr	r2, [r6, #0]
 8001964:	f003 0306 	and.w	r3, r3, #6
 8001968:	2b04      	cmp	r3, #4
 800196a:	bf08      	it	eq
 800196c:	1aad      	subeq	r5, r5, r2
 800196e:	68a3      	ldr	r3, [r4, #8]
 8001970:	6922      	ldr	r2, [r4, #16]
 8001972:	bf0c      	ite	eq
 8001974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001978:	2500      	movne	r5, #0
 800197a:	4293      	cmp	r3, r2
 800197c:	bfc4      	itt	gt
 800197e:	1a9b      	subgt	r3, r3, r2
 8001980:	18ed      	addgt	r5, r5, r3
 8001982:	2600      	movs	r6, #0
 8001984:	341a      	adds	r4, #26
 8001986:	42b5      	cmp	r5, r6
 8001988:	d11a      	bne.n	80019c0 <_printf_common+0xc8>
 800198a:	2000      	movs	r0, #0
 800198c:	e008      	b.n	80019a0 <_printf_common+0xa8>
 800198e:	2301      	movs	r3, #1
 8001990:	4652      	mov	r2, sl
 8001992:	4649      	mov	r1, r9
 8001994:	4638      	mov	r0, r7
 8001996:	47c0      	blx	r8
 8001998:	3001      	adds	r0, #1
 800199a:	d103      	bne.n	80019a4 <_printf_common+0xac>
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a4:	3501      	adds	r5, #1
 80019a6:	e7c6      	b.n	8001936 <_printf_common+0x3e>
 80019a8:	18e1      	adds	r1, r4, r3
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	2030      	movs	r0, #48	; 0x30
 80019ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019b2:	4422      	add	r2, r4
 80019b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019bc:	3302      	adds	r3, #2
 80019be:	e7c7      	b.n	8001950 <_printf_common+0x58>
 80019c0:	2301      	movs	r3, #1
 80019c2:	4622      	mov	r2, r4
 80019c4:	4649      	mov	r1, r9
 80019c6:	4638      	mov	r0, r7
 80019c8:	47c0      	blx	r8
 80019ca:	3001      	adds	r0, #1
 80019cc:	d0e6      	beq.n	800199c <_printf_common+0xa4>
 80019ce:	3601      	adds	r6, #1
 80019d0:	e7d9      	b.n	8001986 <_printf_common+0x8e>
	...

080019d4 <_printf_i>:
 80019d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019d8:	460c      	mov	r4, r1
 80019da:	4691      	mov	r9, r2
 80019dc:	7e27      	ldrb	r7, [r4, #24]
 80019de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019e0:	2f78      	cmp	r7, #120	; 0x78
 80019e2:	4680      	mov	r8, r0
 80019e4:	469a      	mov	sl, r3
 80019e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019ea:	d807      	bhi.n	80019fc <_printf_i+0x28>
 80019ec:	2f62      	cmp	r7, #98	; 0x62
 80019ee:	d80a      	bhi.n	8001a06 <_printf_i+0x32>
 80019f0:	2f00      	cmp	r7, #0
 80019f2:	f000 80d8 	beq.w	8001ba6 <_printf_i+0x1d2>
 80019f6:	2f58      	cmp	r7, #88	; 0x58
 80019f8:	f000 80a3 	beq.w	8001b42 <_printf_i+0x16e>
 80019fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a04:	e03a      	b.n	8001a7c <_printf_i+0xa8>
 8001a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a0a:	2b15      	cmp	r3, #21
 8001a0c:	d8f6      	bhi.n	80019fc <_printf_i+0x28>
 8001a0e:	a001      	add	r0, pc, #4	; (adr r0, 8001a14 <_printf_i+0x40>)
 8001a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001a14:	08001a6d 	.word	0x08001a6d
 8001a18:	08001a81 	.word	0x08001a81
 8001a1c:	080019fd 	.word	0x080019fd
 8001a20:	080019fd 	.word	0x080019fd
 8001a24:	080019fd 	.word	0x080019fd
 8001a28:	080019fd 	.word	0x080019fd
 8001a2c:	08001a81 	.word	0x08001a81
 8001a30:	080019fd 	.word	0x080019fd
 8001a34:	080019fd 	.word	0x080019fd
 8001a38:	080019fd 	.word	0x080019fd
 8001a3c:	080019fd 	.word	0x080019fd
 8001a40:	08001b8d 	.word	0x08001b8d
 8001a44:	08001ab1 	.word	0x08001ab1
 8001a48:	08001b6f 	.word	0x08001b6f
 8001a4c:	080019fd 	.word	0x080019fd
 8001a50:	080019fd 	.word	0x080019fd
 8001a54:	08001baf 	.word	0x08001baf
 8001a58:	080019fd 	.word	0x080019fd
 8001a5c:	08001ab1 	.word	0x08001ab1
 8001a60:	080019fd 	.word	0x080019fd
 8001a64:	080019fd 	.word	0x080019fd
 8001a68:	08001b77 	.word	0x08001b77
 8001a6c:	680b      	ldr	r3, [r1, #0]
 8001a6e:	1d1a      	adds	r2, r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	600a      	str	r2, [r1, #0]
 8001a74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0a3      	b.n	8001bc8 <_printf_i+0x1f4>
 8001a80:	6825      	ldr	r5, [r4, #0]
 8001a82:	6808      	ldr	r0, [r1, #0]
 8001a84:	062e      	lsls	r6, r5, #24
 8001a86:	f100 0304 	add.w	r3, r0, #4
 8001a8a:	d50a      	bpl.n	8001aa2 <_printf_i+0xce>
 8001a8c:	6805      	ldr	r5, [r0, #0]
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	2d00      	cmp	r5, #0
 8001a92:	da03      	bge.n	8001a9c <_printf_i+0xc8>
 8001a94:	232d      	movs	r3, #45	; 0x2d
 8001a96:	426d      	negs	r5, r5
 8001a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a9c:	485e      	ldr	r0, [pc, #376]	; (8001c18 <_printf_i+0x244>)
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	e019      	b.n	8001ad6 <_printf_i+0x102>
 8001aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001aa6:	6805      	ldr	r5, [r0, #0]
 8001aa8:	600b      	str	r3, [r1, #0]
 8001aaa:	bf18      	it	ne
 8001aac:	b22d      	sxthne	r5, r5
 8001aae:	e7ef      	b.n	8001a90 <_printf_i+0xbc>
 8001ab0:	680b      	ldr	r3, [r1, #0]
 8001ab2:	6825      	ldr	r5, [r4, #0]
 8001ab4:	1d18      	adds	r0, r3, #4
 8001ab6:	6008      	str	r0, [r1, #0]
 8001ab8:	0628      	lsls	r0, r5, #24
 8001aba:	d501      	bpl.n	8001ac0 <_printf_i+0xec>
 8001abc:	681d      	ldr	r5, [r3, #0]
 8001abe:	e002      	b.n	8001ac6 <_printf_i+0xf2>
 8001ac0:	0669      	lsls	r1, r5, #25
 8001ac2:	d5fb      	bpl.n	8001abc <_printf_i+0xe8>
 8001ac4:	881d      	ldrh	r5, [r3, #0]
 8001ac6:	4854      	ldr	r0, [pc, #336]	; (8001c18 <_printf_i+0x244>)
 8001ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8001aca:	bf0c      	ite	eq
 8001acc:	2308      	moveq	r3, #8
 8001ace:	230a      	movne	r3, #10
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ad6:	6866      	ldr	r6, [r4, #4]
 8001ad8:	60a6      	str	r6, [r4, #8]
 8001ada:	2e00      	cmp	r6, #0
 8001adc:	bfa2      	ittt	ge
 8001ade:	6821      	ldrge	r1, [r4, #0]
 8001ae0:	f021 0104 	bicge.w	r1, r1, #4
 8001ae4:	6021      	strge	r1, [r4, #0]
 8001ae6:	b90d      	cbnz	r5, 8001aec <_printf_i+0x118>
 8001ae8:	2e00      	cmp	r6, #0
 8001aea:	d04d      	beq.n	8001b88 <_printf_i+0x1b4>
 8001aec:	4616      	mov	r6, r2
 8001aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8001af2:	fb03 5711 	mls	r7, r3, r1, r5
 8001af6:	5dc7      	ldrb	r7, [r0, r7]
 8001af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001afc:	462f      	mov	r7, r5
 8001afe:	42bb      	cmp	r3, r7
 8001b00:	460d      	mov	r5, r1
 8001b02:	d9f4      	bls.n	8001aee <_printf_i+0x11a>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d10b      	bne.n	8001b20 <_printf_i+0x14c>
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	07df      	lsls	r7, r3, #31
 8001b0c:	d508      	bpl.n	8001b20 <_printf_i+0x14c>
 8001b0e:	6923      	ldr	r3, [r4, #16]
 8001b10:	6861      	ldr	r1, [r4, #4]
 8001b12:	4299      	cmp	r1, r3
 8001b14:	bfde      	ittt	le
 8001b16:	2330      	movle	r3, #48	; 0x30
 8001b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b20:	1b92      	subs	r2, r2, r6
 8001b22:	6122      	str	r2, [r4, #16]
 8001b24:	f8cd a000 	str.w	sl, [sp]
 8001b28:	464b      	mov	r3, r9
 8001b2a:	aa03      	add	r2, sp, #12
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	4640      	mov	r0, r8
 8001b30:	f7ff fee2 	bl	80018f8 <_printf_common>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d14c      	bne.n	8001bd2 <_printf_i+0x1fe>
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	b004      	add	sp, #16
 8001b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b42:	4835      	ldr	r0, [pc, #212]	; (8001c18 <_printf_i+0x244>)
 8001b44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	680e      	ldr	r6, [r1, #0]
 8001b4c:	061f      	lsls	r7, r3, #24
 8001b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001b52:	600e      	str	r6, [r1, #0]
 8001b54:	d514      	bpl.n	8001b80 <_printf_i+0x1ac>
 8001b56:	07d9      	lsls	r1, r3, #31
 8001b58:	bf44      	itt	mi
 8001b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8001b5e:	6023      	strmi	r3, [r4, #0]
 8001b60:	b91d      	cbnz	r5, 8001b6a <_printf_i+0x196>
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	f023 0320 	bic.w	r3, r3, #32
 8001b68:	6023      	str	r3, [r4, #0]
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	e7b0      	b.n	8001ad0 <_printf_i+0xfc>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	2378      	movs	r3, #120	; 0x78
 8001b78:	4828      	ldr	r0, [pc, #160]	; (8001c1c <_printf_i+0x248>)
 8001b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b7e:	e7e3      	b.n	8001b48 <_printf_i+0x174>
 8001b80:	065e      	lsls	r6, r3, #25
 8001b82:	bf48      	it	mi
 8001b84:	b2ad      	uxthmi	r5, r5
 8001b86:	e7e6      	b.n	8001b56 <_printf_i+0x182>
 8001b88:	4616      	mov	r6, r2
 8001b8a:	e7bb      	b.n	8001b04 <_printf_i+0x130>
 8001b8c:	680b      	ldr	r3, [r1, #0]
 8001b8e:	6826      	ldr	r6, [r4, #0]
 8001b90:	6960      	ldr	r0, [r4, #20]
 8001b92:	1d1d      	adds	r5, r3, #4
 8001b94:	600d      	str	r5, [r1, #0]
 8001b96:	0635      	lsls	r5, r6, #24
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	d501      	bpl.n	8001ba0 <_printf_i+0x1cc>
 8001b9c:	6018      	str	r0, [r3, #0]
 8001b9e:	e002      	b.n	8001ba6 <_printf_i+0x1d2>
 8001ba0:	0671      	lsls	r1, r6, #25
 8001ba2:	d5fb      	bpl.n	8001b9c <_printf_i+0x1c8>
 8001ba4:	8018      	strh	r0, [r3, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	6123      	str	r3, [r4, #16]
 8001baa:	4616      	mov	r6, r2
 8001bac:	e7ba      	b.n	8001b24 <_printf_i+0x150>
 8001bae:	680b      	ldr	r3, [r1, #0]
 8001bb0:	1d1a      	adds	r2, r3, #4
 8001bb2:	600a      	str	r2, [r1, #0]
 8001bb4:	681e      	ldr	r6, [r3, #0]
 8001bb6:	6862      	ldr	r2, [r4, #4]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f7fe fb28 	bl	8000210 <memchr>
 8001bc0:	b108      	cbz	r0, 8001bc6 <_printf_i+0x1f2>
 8001bc2:	1b80      	subs	r0, r0, r6
 8001bc4:	6060      	str	r0, [r4, #4]
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	6123      	str	r3, [r4, #16]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bd0:	e7a8      	b.n	8001b24 <_printf_i+0x150>
 8001bd2:	6923      	ldr	r3, [r4, #16]
 8001bd4:	4632      	mov	r2, r6
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	4640      	mov	r0, r8
 8001bda:	47d0      	blx	sl
 8001bdc:	3001      	adds	r0, #1
 8001bde:	d0ab      	beq.n	8001b38 <_printf_i+0x164>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	079b      	lsls	r3, r3, #30
 8001be4:	d413      	bmi.n	8001c0e <_printf_i+0x23a>
 8001be6:	68e0      	ldr	r0, [r4, #12]
 8001be8:	9b03      	ldr	r3, [sp, #12]
 8001bea:	4298      	cmp	r0, r3
 8001bec:	bfb8      	it	lt
 8001bee:	4618      	movlt	r0, r3
 8001bf0:	e7a4      	b.n	8001b3c <_printf_i+0x168>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	4632      	mov	r2, r6
 8001bf6:	4649      	mov	r1, r9
 8001bf8:	4640      	mov	r0, r8
 8001bfa:	47d0      	blx	sl
 8001bfc:	3001      	adds	r0, #1
 8001bfe:	d09b      	beq.n	8001b38 <_printf_i+0x164>
 8001c00:	3501      	adds	r5, #1
 8001c02:	68e3      	ldr	r3, [r4, #12]
 8001c04:	9903      	ldr	r1, [sp, #12]
 8001c06:	1a5b      	subs	r3, r3, r1
 8001c08:	42ab      	cmp	r3, r5
 8001c0a:	dcf2      	bgt.n	8001bf2 <_printf_i+0x21e>
 8001c0c:	e7eb      	b.n	8001be6 <_printf_i+0x212>
 8001c0e:	2500      	movs	r5, #0
 8001c10:	f104 0619 	add.w	r6, r4, #25
 8001c14:	e7f5      	b.n	8001c02 <_printf_i+0x22e>
 8001c16:	bf00      	nop
 8001c18:	080022b9 	.word	0x080022b9
 8001c1c:	080022ca 	.word	0x080022ca

08001c20 <_sbrk_r>:
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	4d06      	ldr	r5, [pc, #24]	; (8001c3c <_sbrk_r+0x1c>)
 8001c24:	2300      	movs	r3, #0
 8001c26:	4604      	mov	r4, r0
 8001c28:	4608      	mov	r0, r1
 8001c2a:	602b      	str	r3, [r5, #0]
 8001c2c:	f7fe fcd2 	bl	80005d4 <_sbrk>
 8001c30:	1c43      	adds	r3, r0, #1
 8001c32:	d102      	bne.n	8001c3a <_sbrk_r+0x1a>
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	b103      	cbz	r3, 8001c3a <_sbrk_r+0x1a>
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
 8001c3c:	200002b8 	.word	0x200002b8

08001c40 <__sread>:
 8001c40:	b510      	push	{r4, lr}
 8001c42:	460c      	mov	r4, r1
 8001c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c48:	f000 fab4 	bl	80021b4 <_read_r>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	bfab      	itete	ge
 8001c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c52:	89a3      	ldrhlt	r3, [r4, #12]
 8001c54:	181b      	addge	r3, r3, r0
 8001c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c5a:	bfac      	ite	ge
 8001c5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c5e:	81a3      	strhlt	r3, [r4, #12]
 8001c60:	bd10      	pop	{r4, pc}

08001c62 <__swrite>:
 8001c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c66:	461f      	mov	r7, r3
 8001c68:	898b      	ldrh	r3, [r1, #12]
 8001c6a:	05db      	lsls	r3, r3, #23
 8001c6c:	4605      	mov	r5, r0
 8001c6e:	460c      	mov	r4, r1
 8001c70:	4616      	mov	r6, r2
 8001c72:	d505      	bpl.n	8001c80 <__swrite+0x1e>
 8001c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f000 f9c8 	bl	8002010 <_lseek_r>
 8001c80:	89a3      	ldrh	r3, [r4, #12]
 8001c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c8a:	81a3      	strh	r3, [r4, #12]
 8001c8c:	4632      	mov	r2, r6
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4628      	mov	r0, r5
 8001c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c96:	f000 b869 	b.w	8001d6c <_write_r>

08001c9a <__sseek>:
 8001c9a:	b510      	push	{r4, lr}
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca2:	f000 f9b5 	bl	8002010 <_lseek_r>
 8001ca6:	1c43      	adds	r3, r0, #1
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	bf15      	itete	ne
 8001cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001cb6:	81a3      	strheq	r3, [r4, #12]
 8001cb8:	bf18      	it	ne
 8001cba:	81a3      	strhne	r3, [r4, #12]
 8001cbc:	bd10      	pop	{r4, pc}

08001cbe <__sclose>:
 8001cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cc2:	f000 b8d3 	b.w	8001e6c <_close_r>
	...

08001cc8 <__swbuf_r>:
 8001cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cca:	460e      	mov	r6, r1
 8001ccc:	4614      	mov	r4, r2
 8001cce:	4605      	mov	r5, r0
 8001cd0:	b118      	cbz	r0, 8001cda <__swbuf_r+0x12>
 8001cd2:	6983      	ldr	r3, [r0, #24]
 8001cd4:	b90b      	cbnz	r3, 8001cda <__swbuf_r+0x12>
 8001cd6:	f7ff fbbb 	bl	8001450 <__sinit>
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <__swbuf_r+0x98>)
 8001cdc:	429c      	cmp	r4, r3
 8001cde:	d12b      	bne.n	8001d38 <__swbuf_r+0x70>
 8001ce0:	686c      	ldr	r4, [r5, #4]
 8001ce2:	69a3      	ldr	r3, [r4, #24]
 8001ce4:	60a3      	str	r3, [r4, #8]
 8001ce6:	89a3      	ldrh	r3, [r4, #12]
 8001ce8:	071a      	lsls	r2, r3, #28
 8001cea:	d52f      	bpl.n	8001d4c <__swbuf_r+0x84>
 8001cec:	6923      	ldr	r3, [r4, #16]
 8001cee:	b36b      	cbz	r3, 8001d4c <__swbuf_r+0x84>
 8001cf0:	6923      	ldr	r3, [r4, #16]
 8001cf2:	6820      	ldr	r0, [r4, #0]
 8001cf4:	1ac0      	subs	r0, r0, r3
 8001cf6:	6963      	ldr	r3, [r4, #20]
 8001cf8:	b2f6      	uxtb	r6, r6
 8001cfa:	4283      	cmp	r3, r0
 8001cfc:	4637      	mov	r7, r6
 8001cfe:	dc04      	bgt.n	8001d0a <__swbuf_r+0x42>
 8001d00:	4621      	mov	r1, r4
 8001d02:	4628      	mov	r0, r5
 8001d04:	f000 f948 	bl	8001f98 <_fflush_r>
 8001d08:	bb30      	cbnz	r0, 8001d58 <__swbuf_r+0x90>
 8001d0a:	68a3      	ldr	r3, [r4, #8]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60a3      	str	r3, [r4, #8]
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	6022      	str	r2, [r4, #0]
 8001d16:	701e      	strb	r6, [r3, #0]
 8001d18:	6963      	ldr	r3, [r4, #20]
 8001d1a:	3001      	adds	r0, #1
 8001d1c:	4283      	cmp	r3, r0
 8001d1e:	d004      	beq.n	8001d2a <__swbuf_r+0x62>
 8001d20:	89a3      	ldrh	r3, [r4, #12]
 8001d22:	07db      	lsls	r3, r3, #31
 8001d24:	d506      	bpl.n	8001d34 <__swbuf_r+0x6c>
 8001d26:	2e0a      	cmp	r6, #10
 8001d28:	d104      	bne.n	8001d34 <__swbuf_r+0x6c>
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f000 f933 	bl	8001f98 <_fflush_r>
 8001d32:	b988      	cbnz	r0, 8001d58 <__swbuf_r+0x90>
 8001d34:	4638      	mov	r0, r7
 8001d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <__swbuf_r+0x9c>)
 8001d3a:	429c      	cmp	r4, r3
 8001d3c:	d101      	bne.n	8001d42 <__swbuf_r+0x7a>
 8001d3e:	68ac      	ldr	r4, [r5, #8]
 8001d40:	e7cf      	b.n	8001ce2 <__swbuf_r+0x1a>
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <__swbuf_r+0xa0>)
 8001d44:	429c      	cmp	r4, r3
 8001d46:	bf08      	it	eq
 8001d48:	68ec      	ldreq	r4, [r5, #12]
 8001d4a:	e7ca      	b.n	8001ce2 <__swbuf_r+0x1a>
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f000 f81e 	bl	8001d90 <__swsetup_r>
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d0cb      	beq.n	8001cf0 <__swbuf_r+0x28>
 8001d58:	f04f 37ff 	mov.w	r7, #4294967295
 8001d5c:	e7ea      	b.n	8001d34 <__swbuf_r+0x6c>
 8001d5e:	bf00      	nop
 8001d60:	08002268 	.word	0x08002268
 8001d64:	08002288 	.word	0x08002288
 8001d68:	08002248 	.word	0x08002248

08001d6c <_write_r>:
 8001d6c:	b538      	push	{r3, r4, r5, lr}
 8001d6e:	4d07      	ldr	r5, [pc, #28]	; (8001d8c <_write_r+0x20>)
 8001d70:	4604      	mov	r4, r0
 8001d72:	4608      	mov	r0, r1
 8001d74:	4611      	mov	r1, r2
 8001d76:	2200      	movs	r2, #0
 8001d78:	602a      	str	r2, [r5, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f7fe fbd9 	bl	8000532 <_write>
 8001d80:	1c43      	adds	r3, r0, #1
 8001d82:	d102      	bne.n	8001d8a <_write_r+0x1e>
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	b103      	cbz	r3, 8001d8a <_write_r+0x1e>
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	bd38      	pop	{r3, r4, r5, pc}
 8001d8c:	200002b8 	.word	0x200002b8

08001d90 <__swsetup_r>:
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <__swsetup_r+0xcc>)
 8001d92:	b570      	push	{r4, r5, r6, lr}
 8001d94:	681d      	ldr	r5, [r3, #0]
 8001d96:	4606      	mov	r6, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	b125      	cbz	r5, 8001da6 <__swsetup_r+0x16>
 8001d9c:	69ab      	ldr	r3, [r5, #24]
 8001d9e:	b913      	cbnz	r3, 8001da6 <__swsetup_r+0x16>
 8001da0:	4628      	mov	r0, r5
 8001da2:	f7ff fb55 	bl	8001450 <__sinit>
 8001da6:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <__swsetup_r+0xd0>)
 8001da8:	429c      	cmp	r4, r3
 8001daa:	d10f      	bne.n	8001dcc <__swsetup_r+0x3c>
 8001dac:	686c      	ldr	r4, [r5, #4]
 8001dae:	89a3      	ldrh	r3, [r4, #12]
 8001db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001db4:	0719      	lsls	r1, r3, #28
 8001db6:	d42c      	bmi.n	8001e12 <__swsetup_r+0x82>
 8001db8:	06dd      	lsls	r5, r3, #27
 8001dba:	d411      	bmi.n	8001de0 <__swsetup_r+0x50>
 8001dbc:	2309      	movs	r3, #9
 8001dbe:	6033      	str	r3, [r6, #0]
 8001dc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001dc4:	81a3      	strh	r3, [r4, #12]
 8001dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dca:	e03e      	b.n	8001e4a <__swsetup_r+0xba>
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <__swsetup_r+0xd4>)
 8001dce:	429c      	cmp	r4, r3
 8001dd0:	d101      	bne.n	8001dd6 <__swsetup_r+0x46>
 8001dd2:	68ac      	ldr	r4, [r5, #8]
 8001dd4:	e7eb      	b.n	8001dae <__swsetup_r+0x1e>
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <__swsetup_r+0xd8>)
 8001dd8:	429c      	cmp	r4, r3
 8001dda:	bf08      	it	eq
 8001ddc:	68ec      	ldreq	r4, [r5, #12]
 8001dde:	e7e6      	b.n	8001dae <__swsetup_r+0x1e>
 8001de0:	0758      	lsls	r0, r3, #29
 8001de2:	d512      	bpl.n	8001e0a <__swsetup_r+0x7a>
 8001de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001de6:	b141      	cbz	r1, 8001dfa <__swsetup_r+0x6a>
 8001de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001dec:	4299      	cmp	r1, r3
 8001dee:	d002      	beq.n	8001df6 <__swsetup_r+0x66>
 8001df0:	4630      	mov	r0, r6
 8001df2:	f000 f98f 	bl	8002114 <_free_r>
 8001df6:	2300      	movs	r3, #0
 8001df8:	6363      	str	r3, [r4, #52]	; 0x34
 8001dfa:	89a3      	ldrh	r3, [r4, #12]
 8001dfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e00:	81a3      	strh	r3, [r4, #12]
 8001e02:	2300      	movs	r3, #0
 8001e04:	6063      	str	r3, [r4, #4]
 8001e06:	6923      	ldr	r3, [r4, #16]
 8001e08:	6023      	str	r3, [r4, #0]
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	81a3      	strh	r3, [r4, #12]
 8001e12:	6923      	ldr	r3, [r4, #16]
 8001e14:	b94b      	cbnz	r3, 8001e2a <__swsetup_r+0x9a>
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e20:	d003      	beq.n	8001e2a <__swsetup_r+0x9a>
 8001e22:	4621      	mov	r1, r4
 8001e24:	4630      	mov	r0, r6
 8001e26:	f000 f929 	bl	800207c <__smakebuf_r>
 8001e2a:	89a0      	ldrh	r0, [r4, #12]
 8001e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e30:	f010 0301 	ands.w	r3, r0, #1
 8001e34:	d00a      	beq.n	8001e4c <__swsetup_r+0xbc>
 8001e36:	2300      	movs	r3, #0
 8001e38:	60a3      	str	r3, [r4, #8]
 8001e3a:	6963      	ldr	r3, [r4, #20]
 8001e3c:	425b      	negs	r3, r3
 8001e3e:	61a3      	str	r3, [r4, #24]
 8001e40:	6923      	ldr	r3, [r4, #16]
 8001e42:	b943      	cbnz	r3, 8001e56 <__swsetup_r+0xc6>
 8001e44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001e48:	d1ba      	bne.n	8001dc0 <__swsetup_r+0x30>
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}
 8001e4c:	0781      	lsls	r1, r0, #30
 8001e4e:	bf58      	it	pl
 8001e50:	6963      	ldrpl	r3, [r4, #20]
 8001e52:	60a3      	str	r3, [r4, #8]
 8001e54:	e7f4      	b.n	8001e40 <__swsetup_r+0xb0>
 8001e56:	2000      	movs	r0, #0
 8001e58:	e7f7      	b.n	8001e4a <__swsetup_r+0xba>
 8001e5a:	bf00      	nop
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	08002268 	.word	0x08002268
 8001e64:	08002288 	.word	0x08002288
 8001e68:	08002248 	.word	0x08002248

08001e6c <_close_r>:
 8001e6c:	b538      	push	{r3, r4, r5, lr}
 8001e6e:	4d06      	ldr	r5, [pc, #24]	; (8001e88 <_close_r+0x1c>)
 8001e70:	2300      	movs	r3, #0
 8001e72:	4604      	mov	r4, r0
 8001e74:	4608      	mov	r0, r1
 8001e76:	602b      	str	r3, [r5, #0]
 8001e78:	f7fe fb77 	bl	800056a <_close>
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	d102      	bne.n	8001e86 <_close_r+0x1a>
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	b103      	cbz	r3, 8001e86 <_close_r+0x1a>
 8001e84:	6023      	str	r3, [r4, #0]
 8001e86:	bd38      	pop	{r3, r4, r5, pc}
 8001e88:	200002b8 	.word	0x200002b8

08001e8c <__sflush_r>:
 8001e8c:	898a      	ldrh	r2, [r1, #12]
 8001e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e92:	4605      	mov	r5, r0
 8001e94:	0710      	lsls	r0, r2, #28
 8001e96:	460c      	mov	r4, r1
 8001e98:	d458      	bmi.n	8001f4c <__sflush_r+0xc0>
 8001e9a:	684b      	ldr	r3, [r1, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	dc05      	bgt.n	8001eac <__sflush_r+0x20>
 8001ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dc02      	bgt.n	8001eac <__sflush_r+0x20>
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	d0f9      	beq.n	8001ea6 <__sflush_r+0x1a>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001eb8:	682f      	ldr	r7, [r5, #0]
 8001eba:	602b      	str	r3, [r5, #0]
 8001ebc:	d032      	beq.n	8001f24 <__sflush_r+0x98>
 8001ebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	075a      	lsls	r2, r3, #29
 8001ec4:	d505      	bpl.n	8001ed2 <__sflush_r+0x46>
 8001ec6:	6863      	ldr	r3, [r4, #4]
 8001ec8:	1ac0      	subs	r0, r0, r3
 8001eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ecc:	b10b      	cbz	r3, 8001ed2 <__sflush_r+0x46>
 8001ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed0:	1ac0      	subs	r0, r0, r3
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ed8:	6a21      	ldr	r1, [r4, #32]
 8001eda:	4628      	mov	r0, r5
 8001edc:	47b0      	blx	r6
 8001ede:	1c43      	adds	r3, r0, #1
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	d106      	bne.n	8001ef2 <__sflush_r+0x66>
 8001ee4:	6829      	ldr	r1, [r5, #0]
 8001ee6:	291d      	cmp	r1, #29
 8001ee8:	d82c      	bhi.n	8001f44 <__sflush_r+0xb8>
 8001eea:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <__sflush_r+0x108>)
 8001eec:	40ca      	lsrs	r2, r1
 8001eee:	07d6      	lsls	r6, r2, #31
 8001ef0:	d528      	bpl.n	8001f44 <__sflush_r+0xb8>
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	6062      	str	r2, [r4, #4]
 8001ef6:	04d9      	lsls	r1, r3, #19
 8001ef8:	6922      	ldr	r2, [r4, #16]
 8001efa:	6022      	str	r2, [r4, #0]
 8001efc:	d504      	bpl.n	8001f08 <__sflush_r+0x7c>
 8001efe:	1c42      	adds	r2, r0, #1
 8001f00:	d101      	bne.n	8001f06 <__sflush_r+0x7a>
 8001f02:	682b      	ldr	r3, [r5, #0]
 8001f04:	b903      	cbnz	r3, 8001f08 <__sflush_r+0x7c>
 8001f06:	6560      	str	r0, [r4, #84]	; 0x54
 8001f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f0a:	602f      	str	r7, [r5, #0]
 8001f0c:	2900      	cmp	r1, #0
 8001f0e:	d0ca      	beq.n	8001ea6 <__sflush_r+0x1a>
 8001f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f14:	4299      	cmp	r1, r3
 8001f16:	d002      	beq.n	8001f1e <__sflush_r+0x92>
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f000 f8fb 	bl	8002114 <_free_r>
 8001f1e:	2000      	movs	r0, #0
 8001f20:	6360      	str	r0, [r4, #52]	; 0x34
 8001f22:	e7c1      	b.n	8001ea8 <__sflush_r+0x1c>
 8001f24:	6a21      	ldr	r1, [r4, #32]
 8001f26:	2301      	movs	r3, #1
 8001f28:	4628      	mov	r0, r5
 8001f2a:	47b0      	blx	r6
 8001f2c:	1c41      	adds	r1, r0, #1
 8001f2e:	d1c7      	bne.n	8001ec0 <__sflush_r+0x34>
 8001f30:	682b      	ldr	r3, [r5, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0c4      	beq.n	8001ec0 <__sflush_r+0x34>
 8001f36:	2b1d      	cmp	r3, #29
 8001f38:	d001      	beq.n	8001f3e <__sflush_r+0xb2>
 8001f3a:	2b16      	cmp	r3, #22
 8001f3c:	d101      	bne.n	8001f42 <__sflush_r+0xb6>
 8001f3e:	602f      	str	r7, [r5, #0]
 8001f40:	e7b1      	b.n	8001ea6 <__sflush_r+0x1a>
 8001f42:	89a3      	ldrh	r3, [r4, #12]
 8001f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f48:	81a3      	strh	r3, [r4, #12]
 8001f4a:	e7ad      	b.n	8001ea8 <__sflush_r+0x1c>
 8001f4c:	690f      	ldr	r7, [r1, #16]
 8001f4e:	2f00      	cmp	r7, #0
 8001f50:	d0a9      	beq.n	8001ea6 <__sflush_r+0x1a>
 8001f52:	0793      	lsls	r3, r2, #30
 8001f54:	680e      	ldr	r6, [r1, #0]
 8001f56:	bf08      	it	eq
 8001f58:	694b      	ldreq	r3, [r1, #20]
 8001f5a:	600f      	str	r7, [r1, #0]
 8001f5c:	bf18      	it	ne
 8001f5e:	2300      	movne	r3, #0
 8001f60:	eba6 0807 	sub.w	r8, r6, r7
 8001f64:	608b      	str	r3, [r1, #8]
 8001f66:	f1b8 0f00 	cmp.w	r8, #0
 8001f6a:	dd9c      	ble.n	8001ea6 <__sflush_r+0x1a>
 8001f6c:	6a21      	ldr	r1, [r4, #32]
 8001f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f70:	4643      	mov	r3, r8
 8001f72:	463a      	mov	r2, r7
 8001f74:	4628      	mov	r0, r5
 8001f76:	47b0      	blx	r6
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	dc06      	bgt.n	8001f8a <__sflush_r+0xfe>
 8001f7c:	89a3      	ldrh	r3, [r4, #12]
 8001f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f82:	81a3      	strh	r3, [r4, #12]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	e78e      	b.n	8001ea8 <__sflush_r+0x1c>
 8001f8a:	4407      	add	r7, r0
 8001f8c:	eba8 0800 	sub.w	r8, r8, r0
 8001f90:	e7e9      	b.n	8001f66 <__sflush_r+0xda>
 8001f92:	bf00      	nop
 8001f94:	20400001 	.word	0x20400001

08001f98 <_fflush_r>:
 8001f98:	b538      	push	{r3, r4, r5, lr}
 8001f9a:	690b      	ldr	r3, [r1, #16]
 8001f9c:	4605      	mov	r5, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	b913      	cbnz	r3, 8001fa8 <_fflush_r+0x10>
 8001fa2:	2500      	movs	r5, #0
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	b118      	cbz	r0, 8001fb2 <_fflush_r+0x1a>
 8001faa:	6983      	ldr	r3, [r0, #24]
 8001fac:	b90b      	cbnz	r3, 8001fb2 <_fflush_r+0x1a>
 8001fae:	f7ff fa4f 	bl	8001450 <__sinit>
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <_fflush_r+0x6c>)
 8001fb4:	429c      	cmp	r4, r3
 8001fb6:	d11b      	bne.n	8001ff0 <_fflush_r+0x58>
 8001fb8:	686c      	ldr	r4, [r5, #4]
 8001fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ef      	beq.n	8001fa2 <_fflush_r+0xa>
 8001fc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fc4:	07d0      	lsls	r0, r2, #31
 8001fc6:	d404      	bmi.n	8001fd2 <_fflush_r+0x3a>
 8001fc8:	0599      	lsls	r1, r3, #22
 8001fca:	d402      	bmi.n	8001fd2 <_fflush_r+0x3a>
 8001fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fce:	f7ff fadd 	bl	800158c <__retarget_lock_acquire_recursive>
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	f7ff ff59 	bl	8001e8c <__sflush_r>
 8001fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fdc:	07da      	lsls	r2, r3, #31
 8001fde:	4605      	mov	r5, r0
 8001fe0:	d4e0      	bmi.n	8001fa4 <_fflush_r+0xc>
 8001fe2:	89a3      	ldrh	r3, [r4, #12]
 8001fe4:	059b      	lsls	r3, r3, #22
 8001fe6:	d4dd      	bmi.n	8001fa4 <_fflush_r+0xc>
 8001fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fea:	f7ff fad0 	bl	800158e <__retarget_lock_release_recursive>
 8001fee:	e7d9      	b.n	8001fa4 <_fflush_r+0xc>
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <_fflush_r+0x70>)
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	d101      	bne.n	8001ffa <_fflush_r+0x62>
 8001ff6:	68ac      	ldr	r4, [r5, #8]
 8001ff8:	e7df      	b.n	8001fba <_fflush_r+0x22>
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <_fflush_r+0x74>)
 8001ffc:	429c      	cmp	r4, r3
 8001ffe:	bf08      	it	eq
 8002000:	68ec      	ldreq	r4, [r5, #12]
 8002002:	e7da      	b.n	8001fba <_fflush_r+0x22>
 8002004:	08002268 	.word	0x08002268
 8002008:	08002288 	.word	0x08002288
 800200c:	08002248 	.word	0x08002248

08002010 <_lseek_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	4d07      	ldr	r5, [pc, #28]	; (8002030 <_lseek_r+0x20>)
 8002014:	4604      	mov	r4, r0
 8002016:	4608      	mov	r0, r1
 8002018:	4611      	mov	r1, r2
 800201a:	2200      	movs	r2, #0
 800201c:	602a      	str	r2, [r5, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	f7fe faca 	bl	80005b8 <_lseek>
 8002024:	1c43      	adds	r3, r0, #1
 8002026:	d102      	bne.n	800202e <_lseek_r+0x1e>
 8002028:	682b      	ldr	r3, [r5, #0]
 800202a:	b103      	cbz	r3, 800202e <_lseek_r+0x1e>
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	bd38      	pop	{r3, r4, r5, pc}
 8002030:	200002b8 	.word	0x200002b8

08002034 <__swhatbuf_r>:
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	460e      	mov	r6, r1
 8002038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203c:	2900      	cmp	r1, #0
 800203e:	b096      	sub	sp, #88	; 0x58
 8002040:	4614      	mov	r4, r2
 8002042:	461d      	mov	r5, r3
 8002044:	da07      	bge.n	8002056 <__swhatbuf_r+0x22>
 8002046:	2300      	movs	r3, #0
 8002048:	602b      	str	r3, [r5, #0]
 800204a:	89b3      	ldrh	r3, [r6, #12]
 800204c:	061a      	lsls	r2, r3, #24
 800204e:	d410      	bmi.n	8002072 <__swhatbuf_r+0x3e>
 8002050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002054:	e00e      	b.n	8002074 <__swhatbuf_r+0x40>
 8002056:	466a      	mov	r2, sp
 8002058:	f000 f8be 	bl	80021d8 <_fstat_r>
 800205c:	2800      	cmp	r0, #0
 800205e:	dbf2      	blt.n	8002046 <__swhatbuf_r+0x12>
 8002060:	9a01      	ldr	r2, [sp, #4]
 8002062:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002066:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800206a:	425a      	negs	r2, r3
 800206c:	415a      	adcs	r2, r3
 800206e:	602a      	str	r2, [r5, #0]
 8002070:	e7ee      	b.n	8002050 <__swhatbuf_r+0x1c>
 8002072:	2340      	movs	r3, #64	; 0x40
 8002074:	2000      	movs	r0, #0
 8002076:	6023      	str	r3, [r4, #0]
 8002078:	b016      	add	sp, #88	; 0x58
 800207a:	bd70      	pop	{r4, r5, r6, pc}

0800207c <__smakebuf_r>:
 800207c:	898b      	ldrh	r3, [r1, #12]
 800207e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002080:	079d      	lsls	r5, r3, #30
 8002082:	4606      	mov	r6, r0
 8002084:	460c      	mov	r4, r1
 8002086:	d507      	bpl.n	8002098 <__smakebuf_r+0x1c>
 8002088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	6123      	str	r3, [r4, #16]
 8002090:	2301      	movs	r3, #1
 8002092:	6163      	str	r3, [r4, #20]
 8002094:	b002      	add	sp, #8
 8002096:	bd70      	pop	{r4, r5, r6, pc}
 8002098:	ab01      	add	r3, sp, #4
 800209a:	466a      	mov	r2, sp
 800209c:	f7ff ffca 	bl	8002034 <__swhatbuf_r>
 80020a0:	9900      	ldr	r1, [sp, #0]
 80020a2:	4605      	mov	r5, r0
 80020a4:	4630      	mov	r0, r6
 80020a6:	f7ff fa73 	bl	8001590 <_malloc_r>
 80020aa:	b948      	cbnz	r0, 80020c0 <__smakebuf_r+0x44>
 80020ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020b0:	059a      	lsls	r2, r3, #22
 80020b2:	d4ef      	bmi.n	8002094 <__smakebuf_r+0x18>
 80020b4:	f023 0303 	bic.w	r3, r3, #3
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	81a3      	strh	r3, [r4, #12]
 80020be:	e7e3      	b.n	8002088 <__smakebuf_r+0xc>
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <__smakebuf_r+0x7c>)
 80020c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	6020      	str	r0, [r4, #0]
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	81a3      	strh	r3, [r4, #12]
 80020ce:	9b00      	ldr	r3, [sp, #0]
 80020d0:	6163      	str	r3, [r4, #20]
 80020d2:	9b01      	ldr	r3, [sp, #4]
 80020d4:	6120      	str	r0, [r4, #16]
 80020d6:	b15b      	cbz	r3, 80020f0 <__smakebuf_r+0x74>
 80020d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020dc:	4630      	mov	r0, r6
 80020de:	f000 f88d 	bl	80021fc <_isatty_r>
 80020e2:	b128      	cbz	r0, 80020f0 <__smakebuf_r+0x74>
 80020e4:	89a3      	ldrh	r3, [r4, #12]
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	81a3      	strh	r3, [r4, #12]
 80020f0:	89a0      	ldrh	r0, [r4, #12]
 80020f2:	4305      	orrs	r5, r0
 80020f4:	81a5      	strh	r5, [r4, #12]
 80020f6:	e7cd      	b.n	8002094 <__smakebuf_r+0x18>
 80020f8:	080013e9 	.word	0x080013e9

080020fc <__malloc_lock>:
 80020fc:	4801      	ldr	r0, [pc, #4]	; (8002104 <__malloc_lock+0x8>)
 80020fe:	f7ff ba45 	b.w	800158c <__retarget_lock_acquire_recursive>
 8002102:	bf00      	nop
 8002104:	200002b0 	.word	0x200002b0

08002108 <__malloc_unlock>:
 8002108:	4801      	ldr	r0, [pc, #4]	; (8002110 <__malloc_unlock+0x8>)
 800210a:	f7ff ba40 	b.w	800158e <__retarget_lock_release_recursive>
 800210e:	bf00      	nop
 8002110:	200002b0 	.word	0x200002b0

08002114 <_free_r>:
 8002114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002116:	2900      	cmp	r1, #0
 8002118:	d048      	beq.n	80021ac <_free_r+0x98>
 800211a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800211e:	9001      	str	r0, [sp, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f1a1 0404 	sub.w	r4, r1, #4
 8002126:	bfb8      	it	lt
 8002128:	18e4      	addlt	r4, r4, r3
 800212a:	f7ff ffe7 	bl	80020fc <__malloc_lock>
 800212e:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <_free_r+0x9c>)
 8002130:	9801      	ldr	r0, [sp, #4]
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	4615      	mov	r5, r2
 8002136:	b933      	cbnz	r3, 8002146 <_free_r+0x32>
 8002138:	6063      	str	r3, [r4, #4]
 800213a:	6014      	str	r4, [r2, #0]
 800213c:	b003      	add	sp, #12
 800213e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002142:	f7ff bfe1 	b.w	8002108 <__malloc_unlock>
 8002146:	42a3      	cmp	r3, r4
 8002148:	d90b      	bls.n	8002162 <_free_r+0x4e>
 800214a:	6821      	ldr	r1, [r4, #0]
 800214c:	1862      	adds	r2, r4, r1
 800214e:	4293      	cmp	r3, r2
 8002150:	bf04      	itt	eq
 8002152:	681a      	ldreq	r2, [r3, #0]
 8002154:	685b      	ldreq	r3, [r3, #4]
 8002156:	6063      	str	r3, [r4, #4]
 8002158:	bf04      	itt	eq
 800215a:	1852      	addeq	r2, r2, r1
 800215c:	6022      	streq	r2, [r4, #0]
 800215e:	602c      	str	r4, [r5, #0]
 8002160:	e7ec      	b.n	800213c <_free_r+0x28>
 8002162:	461a      	mov	r2, r3
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	b10b      	cbz	r3, 800216c <_free_r+0x58>
 8002168:	42a3      	cmp	r3, r4
 800216a:	d9fa      	bls.n	8002162 <_free_r+0x4e>
 800216c:	6811      	ldr	r1, [r2, #0]
 800216e:	1855      	adds	r5, r2, r1
 8002170:	42a5      	cmp	r5, r4
 8002172:	d10b      	bne.n	800218c <_free_r+0x78>
 8002174:	6824      	ldr	r4, [r4, #0]
 8002176:	4421      	add	r1, r4
 8002178:	1854      	adds	r4, r2, r1
 800217a:	42a3      	cmp	r3, r4
 800217c:	6011      	str	r1, [r2, #0]
 800217e:	d1dd      	bne.n	800213c <_free_r+0x28>
 8002180:	681c      	ldr	r4, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	6053      	str	r3, [r2, #4]
 8002186:	4421      	add	r1, r4
 8002188:	6011      	str	r1, [r2, #0]
 800218a:	e7d7      	b.n	800213c <_free_r+0x28>
 800218c:	d902      	bls.n	8002194 <_free_r+0x80>
 800218e:	230c      	movs	r3, #12
 8002190:	6003      	str	r3, [r0, #0]
 8002192:	e7d3      	b.n	800213c <_free_r+0x28>
 8002194:	6825      	ldr	r5, [r4, #0]
 8002196:	1961      	adds	r1, r4, r5
 8002198:	428b      	cmp	r3, r1
 800219a:	bf04      	itt	eq
 800219c:	6819      	ldreq	r1, [r3, #0]
 800219e:	685b      	ldreq	r3, [r3, #4]
 80021a0:	6063      	str	r3, [r4, #4]
 80021a2:	bf04      	itt	eq
 80021a4:	1949      	addeq	r1, r1, r5
 80021a6:	6021      	streq	r1, [r4, #0]
 80021a8:	6054      	str	r4, [r2, #4]
 80021aa:	e7c7      	b.n	800213c <_free_r+0x28>
 80021ac:	b003      	add	sp, #12
 80021ae:	bd30      	pop	{r4, r5, pc}
 80021b0:	2000008c 	.word	0x2000008c

080021b4 <_read_r>:
 80021b4:	b538      	push	{r3, r4, r5, lr}
 80021b6:	4d07      	ldr	r5, [pc, #28]	; (80021d4 <_read_r+0x20>)
 80021b8:	4604      	mov	r4, r0
 80021ba:	4608      	mov	r0, r1
 80021bc:	4611      	mov	r1, r2
 80021be:	2200      	movs	r2, #0
 80021c0:	602a      	str	r2, [r5, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f7fe f998 	bl	80004f8 <_read>
 80021c8:	1c43      	adds	r3, r0, #1
 80021ca:	d102      	bne.n	80021d2 <_read_r+0x1e>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	b103      	cbz	r3, 80021d2 <_read_r+0x1e>
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
 80021d4:	200002b8 	.word	0x200002b8

080021d8 <_fstat_r>:
 80021d8:	b538      	push	{r3, r4, r5, lr}
 80021da:	4d07      	ldr	r5, [pc, #28]	; (80021f8 <_fstat_r+0x20>)
 80021dc:	2300      	movs	r3, #0
 80021de:	4604      	mov	r4, r0
 80021e0:	4608      	mov	r0, r1
 80021e2:	4611      	mov	r1, r2
 80021e4:	602b      	str	r3, [r5, #0]
 80021e6:	f7fe f9cc 	bl	8000582 <_fstat>
 80021ea:	1c43      	adds	r3, r0, #1
 80021ec:	d102      	bne.n	80021f4 <_fstat_r+0x1c>
 80021ee:	682b      	ldr	r3, [r5, #0]
 80021f0:	b103      	cbz	r3, 80021f4 <_fstat_r+0x1c>
 80021f2:	6023      	str	r3, [r4, #0]
 80021f4:	bd38      	pop	{r3, r4, r5, pc}
 80021f6:	bf00      	nop
 80021f8:	200002b8 	.word	0x200002b8

080021fc <_isatty_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4d06      	ldr	r5, [pc, #24]	; (8002218 <_isatty_r+0x1c>)
 8002200:	2300      	movs	r3, #0
 8002202:	4604      	mov	r4, r0
 8002204:	4608      	mov	r0, r1
 8002206:	602b      	str	r3, [r5, #0]
 8002208:	f7fe f9cb 	bl	80005a2 <_isatty>
 800220c:	1c43      	adds	r3, r0, #1
 800220e:	d102      	bne.n	8002216 <_isatty_r+0x1a>
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	b103      	cbz	r3, 8002216 <_isatty_r+0x1a>
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	bd38      	pop	{r3, r4, r5, pc}
 8002218:	200002b8 	.word	0x200002b8

0800221c <_init>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	bf00      	nop
 8002220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002222:	bc08      	pop	{r3}
 8002224:	469e      	mov	lr, r3
 8002226:	4770      	bx	lr

08002228 <_fini>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	bf00      	nop
 800222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222e:	bc08      	pop	{r3}
 8002230:	469e      	mov	lr, r3
 8002232:	4770      	bx	lr
