
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000958  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b1c  08000b1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  4 .ARM          00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b28  08000b30  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b28  08000b28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b30  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b30  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b30  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a7b  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000478  00000000  00000000  000125db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00012a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000100  00000000  00000000  00012b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000211b  00000000  00000000  00012c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000163a  00000000  00000000  00014dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000962f  00000000  00000000  000163e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001fa14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000042c  00000000  00000000  0001fa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b04 	.word	0x08000b04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000b04 	.word	0x08000b04

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <SPI_GPIOInits>:
#include <stdint.h>
#include <string.h>
#include "stm32f446xx.h"

void SPI_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <SPI_GPIOInits+0x58>)
 800021c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000222:	2305      	movs	r3, #5
 8000224:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPER_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PIN_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//GPIO_PeriClockControl(GPIOB, ENABLE);  //--> called this function in the periph init function

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000232:	230d      	movs	r3, #13
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f959 	bl	80004f0 <GPIO_Init>
	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800023e:	230e      	movs	r3, #14
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f953 	bl	80004f0 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800024a:	230f      	movs	r3, #15
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f94d 	bl	80004f0 <GPIO_Init>
	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000256:	230c      	movs	r3, #12
 8000258:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f947 	bl	80004f0 <GPIO_Init>

}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40020400 	.word	0x40020400

08000270 <SPI2_Init>:

void SPI2_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_handle;

	SPI2_handle.pSPIx = SPI2;
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <SPI2_Init+0x38>)
 8000278:	607b      	str	r3, [r7, #4]
	SPI2_handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800027a:	2301      	movs	r3, #1
 800027c:	727b      	strb	r3, [r7, #9]
	SPI2_handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800027e:	2301      	movs	r3, #1
 8000280:	723b      	strb	r3, [r7, #8]
	SPI2_handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // 8mhz
 8000282:	2300      	movs	r3, #0
 8000284:	72bb      	strb	r3, [r7, #10]
	SPI2_handle.SPI_Config.SPI_DEF = SPI_DFF_8BITS;
 8000286:	2300      	movs	r3, #0
 8000288:	72fb      	strb	r3, [r7, #11]
	SPI2_handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800028a:	2300      	movs	r3, #0
 800028c:	737b      	strb	r3, [r7, #13]
	SPI2_handle.SPI_Config.SPI_CPOL = SPI_CPOL_HIGH;
 800028e:	2301      	movs	r3, #1
 8000290:	733b      	strb	r3, [r7, #12]
	SPI2_handle.SPI_Config.SPI_SSM = SPI_SSM_EN; // ssm enable in this pin, but not using
 8000292:	2301      	movs	r3, #1
 8000294:	73bb      	strb	r3, [r7, #14]

	//SPI_PeriClockControl(SPI2, ENABLE); //--> called this function in the periph Init function

	SPI_Init(&SPI2_handle);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fb31 	bl	8000900 <SPI_Init>

}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40003800 	.word	0x40003800

080002ac <main>:

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
	char user_data [] = "Hello World";
 80002b2:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <main+0x48>)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//initialize GPIO to SPI2
	SPI_GPIOInits();
 80002bc:	f7ff ffaa 	bl	8000214 <SPI_GPIOInits>

	// initialize SPI2
	SPI2_Init();
 80002c0:	f7ff ffd6 	bl	8000270 <SPI2_Init>

	//this makes the NSS signal internally high and avoid MODF error
	SPI_SSIConfig(SPI2, ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	480c      	ldr	r0, [pc, #48]	; (80002f8 <main+0x4c>)
 80002c8:	f000 fbdc 	bl	8000a84 <SPI_SSIConfig>

	//enable SPI -> at status reg SPE flag
	SPI_PeripheralControl(SPI2, ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	480a      	ldr	r0, [pc, #40]	; (80002f8 <main+0x4c>)
 80002d0:	f000 fbbc 	bl	8000a4c <SPI_PeripheralControl>


	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff94 	bl	8000204 <strlen>
 80002dc:	4602      	mov	r2, r0
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <main+0x4c>)
 80002e4:	f000 fb7b 	bl	80009de <SPI_SendData>

	SPI_PeripheralControl(SPI2, DISABLE);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4803      	ldr	r0, [pc, #12]	; (80002f8 <main+0x4c>)
 80002ec:	f000 fbae 	bl	8000a4c <SPI_PeripheralControl>

	while(1);
 80002f0:	e7fe      	b.n	80002f0 <main+0x44>
 80002f2:	bf00      	nop
 80002f4:	08000b1c 	.word	0x08000b1c
 80002f8:	40003800 	.word	0x40003800

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 fbc7 	bl	8000abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffbd 	bl	80002ac <main>

08000332 <LoopForever>:

LoopForever:
    b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	08000b30 	.word	0x08000b30
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <GPIO_PeriClockControl>:
 * @param pGPIOx Pointer to a GPIO reg
 * @param ENorDI Enalbe or disable
 *
 * @return void.
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
  
  if(ENorDI == ENABLE)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d157      	bne.n	8000412 <GPIO_PeriClockControl+0xc2>
  {
    if(pGPIOx == GPIOA){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a59      	ldr	r2, [pc, #356]	; (80004cc <GPIO_PeriClockControl+0x17c>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x28>
      GPIOA_PCLK_EN();
 800036a:	4b59      	ldr	r3, [pc, #356]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a58      	ldr	r2, [pc, #352]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
    }else if(pGPIOx == GPIOH){
      GPIOH_PCLK_DI();
    }    
  }
  
}
 8000376:	e0a3      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOB){
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a56      	ldr	r2, [pc, #344]	; (80004d4 <GPIO_PeriClockControl+0x184>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x3e>
      GPIOB_PCLK_EN();
 8000380:	4b53      	ldr	r3, [pc, #332]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a52      	ldr	r2, [pc, #328]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000386:	f043 0302 	orr.w	r3, r3, #2
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e098      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOC){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a51      	ldr	r2, [pc, #324]	; (80004d8 <GPIO_PeriClockControl+0x188>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x54>
      GPIOC_PCLK_EN();
 8000396:	4b4e      	ldr	r3, [pc, #312]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a4d      	ldr	r2, [pc, #308]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e08d      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOD){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a4d      	ldr	r2, [pc, #308]	; (80004dc <GPIO_PeriClockControl+0x18c>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x6a>
      GPIOD_PCLK_EN();
 80003ac:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a47      	ldr	r2, [pc, #284]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e082      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOE){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a48      	ldr	r2, [pc, #288]	; (80004e0 <GPIO_PeriClockControl+0x190>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x80>
      GPIOE_PCLK_EN();
 80003c2:	4b43      	ldr	r3, [pc, #268]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a42      	ldr	r2, [pc, #264]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80003c8:	f043 0310 	orr.w	r3, r3, #16
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e077      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOF){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a44      	ldr	r2, [pc, #272]	; (80004e4 <GPIO_PeriClockControl+0x194>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x96>
      GPIOF_PCLK_EN();
 80003d8:	4b3d      	ldr	r3, [pc, #244]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a3c      	ldr	r2, [pc, #240]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e06c      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOG){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a3f      	ldr	r2, [pc, #252]	; (80004e8 <GPIO_PeriClockControl+0x198>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0xac>
      GPIOG_PCLK_EN();
 80003ee:	4b38      	ldr	r3, [pc, #224]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a37      	ldr	r2, [pc, #220]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80003f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e061      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOH){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a3b      	ldr	r2, [pc, #236]	; (80004ec <GPIO_PeriClockControl+0x19c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d15d      	bne.n	80004c0 <GPIO_PeriClockControl+0x170>
      GPIOH_PCLK_EN();
 8000404:	4b32      	ldr	r3, [pc, #200]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a31      	ldr	r2, [pc, #196]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 800040a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e056      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    if(pGPIOx == GPIOA){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a2d      	ldr	r2, [pc, #180]	; (80004cc <GPIO_PeriClockControl+0x17c>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0xd8>
      GPIOA_PCLK_DI();
 800041a:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000420:	f023 0301 	bic.w	r3, r3, #1
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e04b      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOB){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a2a      	ldr	r2, [pc, #168]	; (80004d4 <GPIO_PeriClockControl+0x184>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0xee>
      GPIOB_PCLK_DI();
 8000430:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a26      	ldr	r2, [pc, #152]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000436:	f023 0302 	bic.w	r3, r3, #2
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e040      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOC){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a25      	ldr	r2, [pc, #148]	; (80004d8 <GPIO_PeriClockControl+0x188>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x104>
      GPIOC_PCLK_DI();
 8000446:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 800044c:	f023 0304 	bic.w	r3, r3, #4
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e035      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOD){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a21      	ldr	r2, [pc, #132]	; (80004dc <GPIO_PeriClockControl+0x18c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0x11a>
      GPIOD_PCLK_DI();
 800045c:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000462:	f023 0308 	bic.w	r3, r3, #8
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e02a      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOE){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <GPIO_PeriClockControl+0x190>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x130>
      GPIOE_PCLK_DI();
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a16      	ldr	r2, [pc, #88]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 8000478:	f023 0310 	bic.w	r3, r3, #16
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	e01f      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOF){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <GPIO_PeriClockControl+0x194>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0x146>
      GPIOF_PCLK_DI();
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 800048e:	f023 0320 	bic.w	r3, r3, #32
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000494:	e014      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOG){
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <GPIO_PeriClockControl+0x198>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClockControl+0x15c>
      GPIOG_PCLK_DI();
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80004a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004aa:	e009      	b.n	80004c0 <GPIO_PeriClockControl+0x170>
    }else if(pGPIOx == GPIOH){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <GPIO_PeriClockControl+0x19c>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d105      	bne.n	80004c0 <GPIO_PeriClockControl+0x170>
      GPIOH_PCLK_DI();
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <GPIO_PeriClockControl+0x180>)
 80004ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40020000 	.word	0x40020000
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40020400 	.word	0x40020400
 80004d8:	40020800 	.word	0x40020800
 80004dc:	40020c00 	.word	0x40020c00
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40021400 	.word	0x40021400
 80004e8:	40021800 	.word	0x40021800
 80004ec:	40021c00 	.word	0x40021c00

080004f0 <GPIO_Init>:
 * @param *pGPIOHandle Pointer to GPIO handle
 *
 * @return void.
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0; // temp register
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  
  // Peripheral clock  enable : para não estar sempre a chama-lo na função MAIN
  GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2101      	movs	r1, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff24 	bl	8000350 <GPIO_PeriClockControl>

  //1. configure Gpio pin Mode (aula: 95)
  if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){ // look at the " GPIO pin possible mode" in this.h 0 to 3 are non interrupting modes
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	2b03      	cmp	r3, #3
 800050e:	d81f      	bhi.n	8000550 <GPIO_Init+0x60>
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	4619      	mov	r1, r3
 800052e:	2303      	movs	r3, #3
 8000530:	408b      	lsls	r3, r1
 8000532:	43db      	mvns	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	400a      	ands	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
    pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	430a      	orrs	r2, r1
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	e0c2      	b.n	80006d6 <GPIO_Init+0x1e6>
  }
  else
  {
	  // for interrupt  mode
	  if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b04      	cmp	r3, #4
 8000556:	d817      	bhi.n	8000588 <GPIO_Init+0x98>
	  {
		  //1. configure the FTSR
		  EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000558:	4b47      	ldr	r3, [pc, #284]	; (8000678 <GPIO_Init+0x188>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	4611      	mov	r1, r2
 8000568:	4a43      	ldr	r2, [pc, #268]	; (8000678 <GPIO_Init+0x188>)
 800056a:	430b      	orrs	r3, r1
 800056c:	60d3      	str	r3, [r2, #12]
		  // clear the corresponding RTSR bit
		  EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056e:	4b42      	ldr	r3, [pc, #264]	; (8000678 <GPIO_Init+0x188>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	43d2      	mvns	r2, r2
 800057e:	4611      	mov	r1, r2
 8000580:	4a3d      	ldr	r2, [pc, #244]	; (8000678 <GPIO_Init+0x188>)
 8000582:	400b      	ands	r3, r1
 8000584:	6093      	str	r3, [r2, #8]
 8000586:	e035      	b.n	80005f4 <GPIO_Init+0x104>
	  }
	  else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	2b05      	cmp	r3, #5
 800058e:	d817      	bhi.n	80005c0 <GPIO_Init+0xd0>
	  {
		  //1. configure the RTSR
		  EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000590:	4b39      	ldr	r3, [pc, #228]	; (8000678 <GPIO_Init+0x188>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	4a35      	ldr	r2, [pc, #212]	; (8000678 <GPIO_Init+0x188>)
 80005a2:	430b      	orrs	r3, r1
 80005a4:	6093      	str	r3, [r2, #8]
		  // clear the corresponding FTSR bit
		  EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a6:	4b34      	ldr	r3, [pc, #208]	; (8000678 <GPIO_Init+0x188>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	43d2      	mvns	r2, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <GPIO_Init+0x188>)
 80005ba:	400b      	ands	r3, r1
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	e019      	b.n	80005f4 <GPIO_Init+0x104>
	  }
	  else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FRT)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b06      	cmp	r3, #6
 80005c6:	d815      	bhi.n	80005f4 <GPIO_Init+0x104>
	  {
		  //1. configure the FTSR
		  EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <GPIO_Init+0x188>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <GPIO_Init+0x188>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	60d3      	str	r3, [r2, #12]
		  // and configure RTSR bit
		  EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <GPIO_Init+0x188>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7912      	ldrb	r2, [r2, #4]
 80005e6:	4611      	mov	r1, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	408a      	lsls	r2, r1
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a22      	ldr	r2, [pc, #136]	; (8000678 <GPIO_Init+0x188>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	6093      	str	r3, [r2, #8]
	  }
	  // 2. Configure the GPIO port selection in SYSCFG_EXTICR
	  uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4; // (AULA:111)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	74fb      	strb	r3, [r7, #19]
	  uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	f003 0303 	and.w	r3, r3, #3
 8000604:	74bb      	strb	r3, [r7, #18]
	  uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <GPIO_Init+0x18c>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d045      	beq.n	800069c <GPIO_Init+0x1ac>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <GPIO_Init+0x190>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d02b      	beq.n	8000672 <GPIO_Init+0x182>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <GPIO_Init+0x194>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d024      	beq.n	800066e <GPIO_Init+0x17e>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <GPIO_Init+0x198>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d01d      	beq.n	800066a <GPIO_Init+0x17a>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <GPIO_Init+0x19c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d016      	beq.n	8000666 <GPIO_Init+0x176>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <GPIO_Init+0x1a0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d00f      	beq.n	8000662 <GPIO_Init+0x172>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <GPIO_Init+0x1a4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d008      	beq.n	800065e <GPIO_Init+0x16e>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a11      	ldr	r2, [pc, #68]	; (8000698 <GPIO_Init+0x1a8>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <GPIO_Init+0x16a>
 8000656:	2307      	movs	r3, #7
 8000658:	e021      	b.n	800069e <GPIO_Init+0x1ae>
 800065a:	2300      	movs	r3, #0
 800065c:	e01f      	b.n	800069e <GPIO_Init+0x1ae>
 800065e:	2306      	movs	r3, #6
 8000660:	e01d      	b.n	800069e <GPIO_Init+0x1ae>
 8000662:	2305      	movs	r3, #5
 8000664:	e01b      	b.n	800069e <GPIO_Init+0x1ae>
 8000666:	2304      	movs	r3, #4
 8000668:	e019      	b.n	800069e <GPIO_Init+0x1ae>
 800066a:	2303      	movs	r3, #3
 800066c:	e017      	b.n	800069e <GPIO_Init+0x1ae>
 800066e:	2302      	movs	r3, #2
 8000670:	e015      	b.n	800069e <GPIO_Init+0x1ae>
 8000672:	2301      	movs	r3, #1
 8000674:	e013      	b.n	800069e <GPIO_Init+0x1ae>
 8000676:	bf00      	nop
 8000678:	40013c00 	.word	0x40013c00
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40021000 	.word	0x40021000
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800
 8000698:	40021c00 	.word	0x40021c00
 800069c:	2300      	movs	r3, #0
 800069e:	747b      	strb	r3, [r7, #17]
	  SYSCFG_PCLK_EN();
 80006a0:	4b5c      	ldr	r3, [pc, #368]	; (8000814 <GPIO_Init+0x324>)
 80006a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a4:	4a5b      	ldr	r2, [pc, #364]	; (8000814 <GPIO_Init+0x324>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6453      	str	r3, [r2, #68]	; 0x44
	  SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80006ac:	7c7a      	ldrb	r2, [r7, #17]
 80006ae:	7cbb      	ldrb	r3, [r7, #18]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	fa02 f103 	lsl.w	r1, r2, r3
 80006b6:	4a58      	ldr	r2, [pc, #352]	; (8000818 <GPIO_Init+0x328>)
 80006b8:	7cfb      	ldrb	r3, [r7, #19]
 80006ba:	3302      	adds	r3, #2
 80006bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  // 3. enable the EXTI interrupt delivery using IMR
	  EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c0:	4b56      	ldr	r3, [pc, #344]	; (800081c <GPIO_Init+0x32c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	7912      	ldrb	r2, [r2, #4]
 80006c8:	4611      	mov	r1, r2
 80006ca:	2201      	movs	r2, #1
 80006cc:	408a      	lsls	r2, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a52      	ldr	r2, [pc, #328]	; (800081c <GPIO_Init+0x32c>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6013      	str	r3, [r2, #0]

  }
  
  //2. configure speed
  temp = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	4619      	mov	r1, r3
 80006f8:	2303      	movs	r3, #3
 80006fa:	408b      	lsls	r3, r1
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	400a      	ands	r2, r1
 8000706:	609a      	str	r2, [r3, #8]
  pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6899      	ldr	r1, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	430a      	orrs	r2, r1
 8000716:	609a      	str	r2, [r3, #8]
  
  //3. configure popup popdown setting
  temp = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	79db      	ldrb	r3, [r3, #7]
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	617b      	str	r3, [r7, #20]
  pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	4619      	mov	r1, r3
 800073a:	2303      	movs	r3, #3
 800073c:	408b      	lsls	r3, r1
 800073e:	43db      	mvns	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	400a      	ands	r2, r1
 8000748:	60da      	str	r2, [r3, #12]
  pGPIOHandle->pGPIOx->PUPDR |= temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68d9      	ldr	r1, [r3, #12]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	430a      	orrs	r2, r1
 8000758:	60da      	str	r2, [r3, #12]
    
  //4. configure optype
  temp = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7a1b      	ldrb	r3, [r3, #8]
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	617b      	str	r3, [r7, #20]
  pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	4619      	mov	r1, r3
 800077a:	2301      	movs	r3, #1
 800077c:	408b      	lsls	r3, r1
 800077e:	43db      	mvns	r3, r3
 8000780:	4619      	mov	r1, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	400a      	ands	r2, r1
 8000788:	605a      	str	r2, [r3, #4]
  pGPIOHandle->pGPIOx->OTYPER |= temp;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6859      	ldr	r1, [r3, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	430a      	orrs	r2, r1
 8000798:	605a      	str	r2, [r3, #4]
  
  //5. configure alternate functionality
  temp = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d831      	bhi.n	800080a <GPIO_Init+0x31a>
  {
    uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	743b      	strb	r3, [r7, #16]
    uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	73fb      	strb	r3, [r7, #15]
    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7c3a      	ldrb	r2, [r7, #16]
 80007be:	3208      	adds	r2, #8
 80007c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	220f      	movs	r2, #15
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	7c3a      	ldrb	r2, [r7, #16]
 80007d8:	4001      	ands	r1, r0
 80007da:	3208      	adds	r2, #8
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2) );
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7c3a      	ldrb	r2, [r7, #16]
 80007e6:	3208      	adds	r2, #8
 80007e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a5b      	ldrb	r3, [r3, #9]
 80007f0:	461a      	mov	r2, r3
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	7c3a      	ldrb	r2, [r7, #16]
 8000802:	4301      	orrs	r1, r0
 8000804:	3208      	adds	r2, #8
 8000806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40013800 	.word	0x40013800
 800081c:	40013c00 	.word	0x40013c00

08000820 <SPI_PeriClockControl>:
 * @param ENorDI Enalbe or disable
 *
 * @return void.
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t ENorDI)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE)
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d12b      	bne.n	800088a <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <SPI_PeriClockControl+0xcc>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <SPI_PeriClockControl+0x28>
		  SPI1_PCLK_EN();
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
		  SPI3_PCLK_DI();
		}else if(pSPIx == SPI4){
		  SPI4_PCLK_DI();
		}
	}
}
 8000846:	e04b      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a2a      	ldr	r2, [pc, #168]	; (80008f4 <SPI_PeriClockControl+0xd4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <SPI_PeriClockControl+0x3e>
		  SPI2_PCLK_EN();
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a26      	ldr	r2, [pc, #152]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800085c:	e040      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <SPI_PeriClockControl+0xd8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <SPI_PeriClockControl+0x54>
		  SPI3_PCLK_EN();
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 800086c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000872:	e035      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SPI_PeriClockControl+0xdc>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d131      	bne.n	80008e0 <SPI_PeriClockControl+0xc0>
		  SPI4_PCLK_EN();
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 800087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000882:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000886:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000888:	e02a      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <SPI_PeriClockControl+0xcc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <SPI_PeriClockControl+0x80>
		  SPI1_PCLK_DI();
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 8000898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800089e:	e01f      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <SPI_PeriClockControl+0xd4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <SPI_PeriClockControl+0x96>
		  SPI2_PCLK_DI();
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008b4:	e014      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3){
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <SPI_PeriClockControl+0xd8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d106      	bne.n	80008cc <SPI_PeriClockControl+0xac>
		  SPI3_PCLK_DI();
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ca:	e009      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <SPI_PeriClockControl+0xdc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d105      	bne.n	80008e0 <SPI_PeriClockControl+0xc0>
		  SPI4_PCLK_DI();
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d8:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <SPI_PeriClockControl+0xd0>)
 80008da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008de:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40003800 	.word	0x40003800
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	40013400 	.word	0x40013400

08000900 <SPI_Init>:
* Peripheral Init and DeInit
* the logic here is just yo change values if they are not set be default!!
* Configure tempreg for all the CR1 reg
*/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	// first configure SPI_CR1  reg
	uint32_t tempreg = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]

	// Peripheral clock  enable : para não estar sempre a chama-lo na função MAIN
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff84 	bl	8000820 <SPI_PeriClockControl>


	//1. conf the device mode - in bit field 2 of CR1 reg
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << 2;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]

	//2. Conf Bus Config
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	795b      	ldrb	r3, [r3, #5]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d104      	bne.n	8000938 <SPI_Init+0x38>
	{
		//bide mode should  bus cleared
		tempreg &= ~( 1 << 15);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	e014      	b.n	8000962 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	795b      	ldrb	r3, [r3, #5]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d104      	bne.n	800094a <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << 15);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e00b      	b.n	8000962 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d107      	bne.n	8000962 <SPI_Init+0x62>
	{
		// bidei mdoe should be cleared
		tempreg &= ~( 1 << 15);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000958:	60fb      	str	r3, [r7, #12]
		// rxonly bit musi be set
		tempreg |= ( 1 << 10);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000960:	60fb      	str	r3, [r7, #12]
	}

	//3. Config the clock speed (baud rate)
	tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << 3;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	799b      	ldrb	r3, [r3, #6]
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

	//4. Config the DFF
	tempreg |= pSPIHandle->SPI_Config.SPI_DEF << 11;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	79db      	ldrb	r3, [r3, #7]
 8000974:	02db      	lsls	r3, r3, #11
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4313      	orrs	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]

	//4. Config the CPOL
	tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << 1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7a1b      	ldrb	r3, [r3, #8]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4313      	orrs	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

	//5. Config the CPHA
	tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7a5b      	ldrb	r3, [r3, #9]
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4313      	orrs	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

	//6. Config the SSM
	tempreg |= pSPIHandle->SPI_Config.SPI_SSM << 9;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a9b      	ldrb	r3, [r3, #10]
 800099c:	025b      	lsls	r3, r3, #9
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	601a      	str	r2, [r3, #0]
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SPI_GetFlagStatus>:
/*
 * Data send and receive
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <SPI_SendData>:
 * @Note  this is a blocking call
 * 			also it's a polling based call - polling for the TXE flag to SET - this may hang  permanently
 *
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
	while (Len > 0)
 80009ea:	e027      	b.n	8000a3c <SPI_SendData+0x5e>
	{
		//1. wait until SEreg TXEflag is SET = empty
		//while( ! (pSPIx->SR & (1 << 1)));  --- alternative in a function to check flag
		while(SPI_GetFlagStatus(pSPIx, SPI_SR_TXE_FLAG) == FLAG_RESET );
 80009ec:	bf00      	nop
 80009ee:	2102      	movs	r1, #2
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff ffe0 	bl	80009b6 <SPI_GetFlagStatus>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f8      	beq.n	80009ee <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_REG_DFF_BIT ))
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00e      	beq.n	8000a26 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR - Data register
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	60da      	str	r2, [r3, #12]
			Len--;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
			Len--;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	e00a      	b.n	8000a3c <SPI_SendData+0x5e>
		}
		else
		{
			//8 Bit DFF
			pSPIx->DR = *(pTxBuffer);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	60da      	str	r2, [r3, #12]
			Len--;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
	while (Len > 0)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1d4      	bne.n	80009ec <SPI_SendData+0xe>
		}
	}

}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SPI_PeripheralControl>:

}


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t ENorDI)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
	if (ENorDI == ENABLE)
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d106      	bne.n	8000a6c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_REG_SPI_EN_BIT);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_REG_SPI_EN_BIT);
	}

}
 8000a6a:	e005      	b.n	8000a78 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_REG_SPI_EN_BIT);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SPI_SSIConfig>:


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t ENorDI)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
	if (ENorDI == ENABLE)
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d106      	bne.n	8000aa4 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_REG_SSI_BIT);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_REG_SSI_BIT);
	}

}
 8000aa2:	e005      	b.n	8000ab0 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_REG_SSI_BIT);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <__libc_init_array>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	4d0d      	ldr	r5, [pc, #52]	; (8000af4 <__libc_init_array+0x38>)
 8000ac0:	4c0d      	ldr	r4, [pc, #52]	; (8000af8 <__libc_init_array+0x3c>)
 8000ac2:	1b64      	subs	r4, r4, r5
 8000ac4:	10a4      	asrs	r4, r4, #2
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	42a6      	cmp	r6, r4
 8000aca:	d109      	bne.n	8000ae0 <__libc_init_array+0x24>
 8000acc:	4d0b      	ldr	r5, [pc, #44]	; (8000afc <__libc_init_array+0x40>)
 8000ace:	4c0c      	ldr	r4, [pc, #48]	; (8000b00 <__libc_init_array+0x44>)
 8000ad0:	f000 f818 	bl	8000b04 <_init>
 8000ad4:	1b64      	subs	r4, r4, r5
 8000ad6:	10a4      	asrs	r4, r4, #2
 8000ad8:	2600      	movs	r6, #0
 8000ada:	42a6      	cmp	r6, r4
 8000adc:	d105      	bne.n	8000aea <__libc_init_array+0x2e>
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae4:	4798      	blx	r3
 8000ae6:	3601      	adds	r6, #1
 8000ae8:	e7ee      	b.n	8000ac8 <__libc_init_array+0xc>
 8000aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aee:	4798      	blx	r3
 8000af0:	3601      	adds	r6, #1
 8000af2:	e7f2      	b.n	8000ada <__libc_init_array+0x1e>
 8000af4:	08000b28 	.word	0x08000b28
 8000af8:	08000b28 	.word	0x08000b28
 8000afc:	08000b28 	.word	0x08000b28
 8000b00:	08000b2c 	.word	0x08000b2c

08000b04 <_init>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	bf00      	nop
 8000b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0a:	bc08      	pop	{r3}
 8000b0c:	469e      	mov	lr, r3
 8000b0e:	4770      	bx	lr

08000b10 <_fini>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr
